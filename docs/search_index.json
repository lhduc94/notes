[["index.html", "Kungfu Pandas Li nói u Gii thiu cun sách Gii thiu tác gi", " Kungfu Pandas Lê Hunh c 2022-09-05 Li nói u Gii thiu cun sách Gii thiu tác gi "],["cu-trúc-và-kiu-d-liu.html", "Chng 1 Cu trúc và kiu d liu 1.1 Series 1.2 DataFrame 1.3 Data type trong pandas", " Chng 1 Cu trúc và kiu d liu Mc tiêu ca chng này nhm gii thiu v các cu trúc c bn trong Pandas là Series và DataFrame. Trong chng này, bn s hc cách khi to các cu trúc này cng nh mt s thao tác c bn trên Series. Bn cng s c bit v mt s kiu d liu thng gp trong pandas và cách  gim thiu b nh s dng khi khi to d liu. 1.1 Series Trong Pandas, Series là mng 1 chiu bao gm mt danh sách giá tr, và mt mng cha index ca các giá tr. Trong d liu dng bng, mi Series c xem nh là mt ct ca bng ó. Cách n gin  to Series nh sau s = pd.Series(data, index=None, name=None) Trong ó data có th có dng: numpy.ndarray, List Python dict Scalar index có th truyn hoc không, tùy vào dng ca data mà index s c nh ngha khác nhau. name là tên ca Series, giá tr này cng không nht thit phi truyn vào. 1.1.1 Các cách khi to Khi to Series bng array Khi không truyn giá tr index, Series s mc nh index ca nó là 1 mng s nguyên t 0 n len(data) - 1 In [1]: pd.Series(data=[0, 1, 2], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], name=&quot;meow&quot;) Out[1]: a 0 b 1 c 2 Name: meow, dtype: int64 Khi to Series bng dict In [1]: pd.Series({&quot;b&quot;: 1, &quot;a&quot;:0, &quot;c&quot;: 2}) Out[1]: b 1 a 0 c 2 dtype: int64 Lu ý: Trong trng hp bn truyn bin index vào, Series s ánh index da vào th t trong index, và ch cha các giá tr ca dict có key nm trong index. Vi các giá tr trong bin index không có trong keys ca dict, Series s to ra các giá tr b thiu NaN. In [1]: pd.Series({&quot;a&quot;: 0, &quot;b&quot;: 1, &quot;c&quot;: 2, &quot;e&quot;: 4}, index=[&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;a&quot;]) Out[1]: b 1.0 c 2.0 d NaN a 0.0 dtype: float64 Lu ý: NaN là giá tr mc nh cho d liu b thiu trong pandas và giá tr này có kiu là float64 nên kiu d liu ca Series cng là float64 khác vi int64  ví d trc ó. Khi to Series bng mt giá tr (Scalar) In [1]: pd.Series(data=1, index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) Out[1]: a 1 b 1 c 1 dtype: int64 1.1.2 Mt s thao tác c bn Thao tác trên Series cng ging vi thao tác trên numpy.array. Ngoài ra chúng ta còn có th tác vi Series da vào index Ví d: In [1]: s = pd.Series(data=[0, 1, 2, 3, 4, 5], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]) Hin th toàn b giá tr ca Series Ta gi thuc tính .values In [1]: s.values Out[1]: array([0, 1, 2, 3, 4, 5]) Ly theo indice In [2]: s[2] Out[2]: 2 Ly theo index In [3]: s[&quot;c&quot;] Out[3]: 2 Slice indice In [4]: s[1:3] Out[4]: b 1 d 2 dtype: int64 Slice index In [5]: s[&quot;b&quot;:&quot;c&quot;] Out[5]: b 1 c 2 dtype: int64 List indice In [6]: s[[1, 2, 4]] Out[6]: b 1 c 2 e 4 dtype: int64 List index In [7]: s[[&quot;b&quot;, &quot;c&quot;, &quot;e&quot;]] Out[7]: b 1 c 2 e 4 dtype: int64 iu kin In [5]: s[s &gt; s.mean()] Out[5]: d 3 e 4 f 5 dtype: int64 1.2 DataFrame DataFrame là cu trúc d liu chính và cng là c trng ca pandas. Cng ging nh SQL Table, DataFrame là mt bng gm mt hay nhiu ct d liu. Hoc có th nói rõ hn là DataFrame là tp hp các Series li vi nhau. Cách khi to DataFrame nh sau df = pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) Cng ging nh Series, data ca DataFrame có nhiu cách khi to khác nhau nh: dict ca Series, dict ca numpy.array/List Mng 2 chiu numpy.ndarray, List ca List Mng có cu trúc T 1 Series T DataFrame khác Tùy vào cu trúc ca data mà chúng ta có th b qua bin index. Bin columns th hin tên ca các Series. dtype s nh ngha các kiu d liu ca d liu, chúng ta s tho lun v nó  phn k tip ca chng này. copy dùng  to bn sao t d liu data, nó ch nh hng khi data là DataFrame khác hoc numpy.ndarray, vic copy này s tránh trng hp 2 bin cùng tr v cùng 1 b nh. 1.2.1 Các cách khi to Khi to DataFrame t dict ca Series Khi không truyn bin index vào, thì index ca DataFrame s là hp gia 2 index ca Series và chúng s c sp xp theo th t t vng. Nu ta không truyn columns thì các ct ca DataFrame s c sp xp theo th t truyn vào các keys ca dict. Khi truyn bin index vào, tng t nh Series, ch nhng index nm trong index mi c chn, còn nhng index b thiu s c in giá tr NaN Khi truyn giá tr columns, DataFrame s chn nhng Series thuc dict có key thuc columns, giá tr trong columns không có trong key ca dict s c gán NaN In [1]: d = { &quot;one&quot;: pd.Series([1, 2, 3], index=[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]), &quot;two&quot;: pd.Series([1, 2, 3, 4], index=[&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;]) } In [2]: pd.DataFrame(d) Out[2]: one two a 3.0 2 b 2.0 3 c 1.0 1 d NaN 4 In [3]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;]) Out[3]: one two d NaN 4 b 2.0 3 a 3.0 2 In [4]: pd.DataFrame(d, index=[&quot;d&quot;, &quot;b&quot;, &quot;a&quot;], columns=[&quot;two&quot;, &quot;three&quot;]) Out[4]: two three d 4 NaN b 3 NaN a 2 NaN Khi to DataFrame t dict ca numpy.ndarray/List i vi vic khi to này, bt buc các mng phi có cùng  dài. Khi không truyn index vào thì index ca DataFrame s c to t 0 n len(n) - 1 trong ó n là  dài ca mng. Khi truyn giá tr columns, DataFrame s chn nhng key thuc dict và cng thuc columns, giá tr trong columns không có trong key ca dict s c gán NaN In [1]: d = { &quot;one&quot;: [1, 2, 3, 4], &quot;two&quot;: [1, 2, 3, 4], &quot;three&quot;: [1, 2, 3, 4] } In [2]: pd.DataFrame(data=d, index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;four&quot;]) Out[2]: one two four a 1 1 NaN b 2 2 NaN c 3 3 NaN d 4 4 NaN Khi to DataFrame t Mng 2 chiu/ 2-d numpy.ndarray Khi không truyn index vào thì index ca DataFrame s c to t 0 n len(n) - 1 trong ó n là s lng List con hoc là s dòng hay shape[0] ca numpy.ndarray. Khi không truyn columns thì tên columns s c to t 0 n len(n) - 1 vi n là  dài ln nht ca List con hoc shape[1] ca numpy.ndarray In [1]: pd.DataFrame(data=[[1, 2], [3, 4, 5]], index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;]) Out[1]: one two three a 1 2 NaN b 3 4 5.0 In [2]: pd.DataFrame(data=np.random.rand(2,3), index=[&quot;a&quot;, &quot;b&quot;], columns=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;])) Out[2]: one two three a 0.662008 0.085735 0.331281 b 0.115360 0.358092 0.862477 Khi to DataFrame t danh sách các dict  cách khi to này, bn hãy tng tng rng mi dict là mt dòng ca DataFrame vi các key là tên ct và value là giá tr ti ct ó. Vic truyn thêm hoc không truyn index cng ging nh các trng hp khi to trên. Lu ý: Trong trng hp này, nu bn truyn columns vào thì columns bt buc phi cha tt c các key ca dict Trong ví d di ây, columns phi cha toàn b keys [\"one\", \"two\", \"three\"], nu thiu 1 trong 3 s phát sinh li. In [1]: d = [{&quot;one&quot;: 1, &quot;two&quot;: 2}, {&quot;one&quot;: 4, &quot;two&quot;: 5, &quot;three&quot;: 6}] In [2]: pd.DataFrame(d, index=[&quot;a&quot;, &quot;b&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: one two three four a 1 2 NaN NaN b 4 5 6.0 NaN Khi to DataFrame t Mng có cu trúc Mng có cu trúc là mng mà các phn t ca nó là mt cu trúc, bao gm các thành phn nh hn, các thành phn này c t tên và khai báo kiu d liu. Di ây là mt ví d Mng có cu trúc trong numpy In [1]: data = np.array([(&#39;pikachu&#39;, 9, 27.0), (&#39;mewtwo&#39;, 3, 81.0)], dtype=[(&#39;name&#39;, &#39;U10&#39;), (&#39;age&#39;, &#39;i4&#39;), (&#39;weight&#39;, &#39;f4&#39;)]) In [2]: pd.DataFrame(data) Out[2]: name age weight 0 pikachu 9 27.0 1 mewtwo 3 81.0 Khi to DataFrame t namedtuple Các trng trong nametuple s c gán thành tên các columns trong DataFrame. Nhng giá tr ca namedtuple s c xem là 1 dòng trong DataFrame. S lng ct ca DataFrame s ph thuc vào s lng giá tr ca phn t namedtuple u tiên. Nu các phn t phía sau có s lng giá tr ít hn thì s c in NaN và ngc li s tr ra li nu s lng giá tr ca namedtuple ln hn s lng giá tr ca phn t namedtuple u tiên. Ví d v cách to namedtuple from collections import namedtuple Point2D = namedtuple(&quot;Point2D&quot;, &quot;x y&quot;) Point3D = namedtuple(&quot;Point3D&quot;, &quot;x y z&quot;) To DataFrame t namedtuple Point2D In [1]: pd.DataFrame([Point2D(0, 0), Point2D(0, 1), Point2D(0, 2)]) Out[1]: x y 0 0 0 1 0 1 2 0 2 To DataFrame t namedtuple c Point2D và Point3D In [1]: pd.DataFrame([Point3D(0, 0, 0), Point2D(0, 1), Point3D(0, 2, 3)]) Out[1]: x y z 0 0 0 0.0 1 0 1 NaN 2 0 2 3.0 Nh ta thy, ti phn t th 2 ch có 2 giá tr, trong khi phn t th nht có 3 giá tr, vy nên phn t b thiu ti ct z s c gán NaN Khi to DataFrame t Series In [1]: s = pd.Series(data=[0, 1, 2], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], name=&quot;meow&quot;) In [2]: pd.DataFrame(s) Out[2]: meow a 0 b 1 c 2 name ca Series s là tên ct ca DataFrame và index ca Series s là index ca DataFrame nu ta không truyn các bin index, columns khi khi to pd.DataFrame 1.2.2 Các hàm khi to thay th DataFrame.from_dict Cách khi to pd.DataFrame.from_dict(data, orient=&#39;columns&#39;, dtype=None, columns=None) data truyn vào là 1 dict, orient có 2 giá tr có th a vào là {\"columns\", \"index\"}, columns là danh sách tên các ct ca DataFrame. Lu ý: Ch c truyn columns khi orient=\"index\". Khi orient=\"columns\" s báo li. Ví d to DataFrame khi orient=\"columns\". Vi cách khi to này tên các ct ca DataFrame s là key ca dict In [1]: data = {&quot;col_1&quot;: [3, 2, 1, 0], &quot;col_2&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]} In [2]: pd.DataFrame.from_dict(data) Out[2]: col_1 col_2 0 3 a 1 2 b 2 1 c 3 0 d Ví d to DataFrame khi orient=\"index\". Vi cách khi to này index ca DataFrame s là key ca dict. In [1]: data = {&quot;col_1&quot;: [3, 2, 1, 0], &quot;col_2&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]} In [2]: pd.DataFrame.from_dict(data, orient=&quot;index&quot;, columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: col_1 col_2 0 3 a 1 2 b 2 1 c 3 0 d DataFrame.from_records Cách khi to pd.DataFrame.from_records(data) data truyn vào có th là mt mng có cu trúc In [1]: data = np.array([(&#39;Rex&#39;, 9, 81.0), (&#39;Fido&#39;, 3, 27.0)], dtype=[(&#39;name&#39;, &#39;U10&#39;), (&#39;age&#39;, &#39;i4&#39;), (&#39;weight&#39;, &#39;f4&#39;)]) In [2]: pd.DataFrame.from_records(data, index=[&quot;a&quot;, &quot;b&quot;]) Out[2]: name age weight a Rex 9 81.0 b Fido 3 27.0 D liu có th mt danh sách các namedtuple from collections import namedtuple Point2D = namedtuple(&quot;Point2D&quot;, &quot;x y&quot;) Point3D = namedtuple(&quot;Point3D&quot;, &quot;x y z&quot;) pd.DataFrame.from_records([Point3D(0, 0, 0), Point2D(0, 1), Point3D(0, 2, 3)], columns=[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) x y z a 0 0 0.0 b 0 1 NaN c 0 2 3.0 Hoc 1 danh sách các dict In [1]: d = [{&quot;one&quot;: 1, &quot;two&quot;: 2}, {&quot;one&quot;: 4, &quot;two&quot;: 5, &quot;three&quot;: 6}] In [2]: pd.DataFrame.from_records(d, index=[&quot;a&quot;, &quot;b&quot;], columns=[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]) Out[2]: one two three four a 1 2 NaN NaN b 4 5 6.0 NaN 1.3 Data type trong pandas  kim tra kiu d liu ca Series hay DataFrame bn có th gi thuc tính dtypes hoc phng thc .info(). Các kiu d liu thng gp ca Pandas c mô t theo bng di ây: Các kiu d liu ph bin Numpy/Pandas object Hin th Boolean np.bool bool Integer np.int, np.uint int uint Float np.float float Object np.object O, object Datetime np.datetime64, pd.Timestamp datetime64 Timedelta np.timedelta64, pd.Timedelta timedelta64 Category pd.Categorical category Complex np.complex complex Ví d: In [1]: df = pd.DataFrame({ &#39;col_1&#39;: [1, 0, 1, 0], &#39;col_2&#39;: [1.0, 2.0, 3.0, 4.0], &#39;col_3&#39;: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;], &#39;col_4&#39;: [&#39;1&#39;, 2, &#39;3&#39;, 4], &#39;col_5&#39;: [True, False, True, False], &#39;col_6&#39;: [&#39;2021-06-01&#39;, &#39;2021-06-02&#39;, &#39;2021-06-03&#39;, &#39;2021-06-04&#39;]}) In [2]: df Out[2]: col_1 col_2 col_3 col_4 col_5 col_6 0 1 1.0 1 1 True 2021-06-01 1 0 2.0 2 2 False 2021-06-02 2 1 3.0 3 3 True 2021-06-03 3 0 4.0 4 4 False 2021-06-04 In [3]: df.dtypes Out[3]: col_1 int64 col_2 float64 col_3 object col_4 object col_5 bool col_6 object dtype: object Lu ý: Nu không khai báo kiu d liu khi khi to, pandas s mc nh kiu d liu là int64, float64, object và bool. Pandas s không bit kiu d liu timestamp nu không khai báo. Ch có th khai báo duy nht 1 kiu d liu khi khi to pandas. Ví d nh tt c d liu ca bn là int hoc có th c ép kiu v intthì có th khai báo dtype=np.int  ví d phía di col_1, col_2, col_4, col_5 có th ép v kiu int, còn col_3, col_6 thì không th ép kiu c. In [1]: df = pd.DataFrame({ &#39;col_1&#39;: [1, 0, 1, 0], &#39;col_2&#39;: [1.0, 2.0, 3.0, 4.0], &#39;col_3&#39;: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;], &#39;col_4&#39;: [&#39;1&#39;, 2, &#39;3&#39;, 4], &#39;col_5&#39;: [True, False, True, False], &#39;col_6&#39;: [&#39;2021-06-01&#39;, &#39;2021-06-02&#39;, &#39;2021-06-03&#39;, &#39;2021-06-04&#39;]}, dtype=np.int) In [2]: df Out[2]: col_1 col_2 col_3 col_4 col_5 col_6 0 1 1 1 1 1 2021-06-01 1 0 2 2 2 0 2021-06-02 2 1 3 3 3 1 2021-06-03 3 0 4 4 4 0 2021-06-04 In [3]: df.dtypes Out[3]: col_1 int64 col_2 int64 col_3 object col_4 int64 col_5 int64 col_6 object dtype: object Mo: Nu d liu có khong nh thì thay vì khai báo kiu np.int, ta có th khai báo kiu integer vi s byte phù hp  gim b nh lu tr.  xem b nh s dng ca DataFrame, ta có th dùng .memory_usage(). Mt s kiu integer trong numpy nh np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64 Theo ví d trên, khi dtype=np.int In [1]: df.memory_usage() Out[1]: Index 128 col_1 32 col_2 32 col_3 32 col_4 32 col_5 32 col_6 32 dtype: int64 và sau khi thay bng dtype=np.int8 In [1]: df.memory_usage() Out[1]: Index 128 col_1 4 col_2 4 col_3 4 col_4 4 col_5 4 col_6 32 dtype: int64 Phng thc ép kiu này c áp dng khi bn khi to DataFrame, ngoài ra còn có hàm ép kiu khác i vi DataFrame cho trc, ni dung này s c  cp  Chng 3. "],["nhp-xut-trong-pandas.html", "Chng 2 Nhp xut trong pandas 2.1 c và lu file 2.2 Cu hình pandas", " Chng 2 Nhp xut trong pandas  Chng 1 chúng ta ã bit cách khi to DataFrame t các d liu cho trc. Trong chng này s hng dn cách c d liu t file bng pandas, mt s kiu file thng thy cho d liu dng bng là .csv và .xlsx. Bn cng có th c d liu bán cu trúc nh JSON bng cách load file bng Python sau ó dùng các cách khi to nh  Chng 1 hoc có th dùng hàm ph tr ca Pandas.  phn th hai ca chng, bn s c hng dn mt s cách cu hình cho Pandas nh thay i s dòng, s ct hin th 2.1 c và lu file 2.1.1 csv, tsv 2.1.1.1 c file Chúng ta có th c file csv vi pandas theo lnh sau df = pd.read_csv(filepath, sep=&#39;,&#39;, names=NoDefault.no_default, index_col=None, usecols=None, dtype=None, skiprows=None, skipfooter=0, nrows=None) Trong ó: filepath là ng dn n file trong máy hoc ng link URL sep dùng  nhn din cách chia thành ct, nu không truyn tham s này thì pandas t hiu là chia theo ',', ngoài ra có th chia theo ';' i vi macOS và '\\t' vi file có nh dng .tsv names là tên các ct ca bng. Nu bng ã có tên ct thì nên b qua tham s này, pandas s ly dòng u tiên ca file làm tên ct. index_col dùng  ch nh v trí các ct dùng  làm index cho bng. usecols dùng  ch nh v trí hoc tên các ct cn c. dtype dùng  nh dng kiu d liu ca các ct. skiprows c dùng khi mun b qua mt s dòng u ca bng. skipfooter tng t nh skiprows nhng s b qua các dòng cui cùng ca bng. nrows dùng  ch nh s lng dòng ca bn mà bn s c bng pandas Ví d c file d liu sale c cho ti ây. Gi s ta ch ly các ct date, weekly_sales và is_holiday và ly ct date làm index và ch ly 6 dòng u In [1]: df = pd.read_csv(&#39;https://raw.githubusercontent.com/lhduc94/kungfupandas/master/data/sales_subset.csv&#39;, index_col=[&#39;date&#39;], usecols=[&#39;date&#39;,&#39;weekly_sales&#39;,&#39;is_holiday&#39;], nrows=6) In [2]: df Out[2]: weekly_sales is_holiday date 2010-02-05 24924.50 False 2010-03-05 21827.90 False 2010-04-02 57258.43 False 2010-05-07 17413.94 False 2010-06-04 17558.09 False 2010-07-02 16333.14 False 2.1.1.2 Xut file  lu DataFrame di dng file ta có th dùng câu lnh .to_csv() theo cú pháp sau df.to_csv(filename, sep=&#39;,&#39;, columns=None, header=True, index=True) Trong ó: filename là a ch file mà bn mun lu li sep tng t nh lúc c file columns là tên các ct bn mun lu xung, nu mun lu tt c các ct thì bn có th b qua tham s này. header mc nh là True nu bn mun lu tên ct index mc nh là True nu bn mun lu index ca bng. Ví d df.to_csv(&#39;sales.csv&#39;, columns=&#39;weekly_sales&#39;, index=False) 2.1.2 Excel 2.1.2.1 c file Excel  c file Excel ta dùng cú pháp sau x = pd.ExcelFile(filename) Vi filename là ng dn n file  xem tên các sheets ca x ta có th dùng x.sheet_names. Sau ó  c tng sheet ca x ta có th dùng .parse() df = x.parse(sheet_name, header=0, names=None, index_col=None, usecols=None, skiprows=None, skipfooter=0, nrows=None) Trong ó sheet_name là tên sheet cn c, các thông s còn li tng t nh phn c file csv và tsv. Mt cách khác  c file excel là dùng hàm pandas.read_excel vi tham s io là tên file. 2.1.2.2 Xut file Excel Gi s ta có các DataFrame df1, df2, df3 cn c lu vào 1 file Excel duy nht import pandas as pd df1 = pd.DataFrame({&#39;col_1&#39;: [1, 2, 3, 4]}) df2 = pd.DataFrame({&#39;col_1&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]}) df3 = pd.DataFrame({&#39;col_1&#39;: [True, True, False, False]})  ghi các bng vào file Excel, bc u tiên là khi to bin writer theo cú pháp writer = pd.ExcelWriter(&#39;pandas_multiple.xlsx&#39;, mode=&#39;w&#39;, if_sheet_exists=None, engine=None) Trong ó: filename là tên file excel mode là phng thc ghi file vi w là vit file mi và a là vit thêm vào file. Mc nh là w if_sheet_exists là phng thc ghi file nu file hoc sheet ã tn ti, bao gm các phng thc di ây (mc nh là error) error: hin ValueError nu ã tn ti sheet new: To sheet mi vi tên ph thuc vào engine replace: Xóa ni dung ca sheet trc khi vit. overlay: Vit lên sheet ã tn ti mà không xóa các sheet c engine: Mt s kiu h tr ghi file nh xlsxwriter, openpyxl, openpyxl, odswriter Lu ý: mode='w' không c s dng vi engine xlsxwriter, khi khai báo engine này s báo li. if_sheet_exists ch s dng vi mode='a' overlay ch h tr vi phiên bn 1.4.0 tr lên.  ghi tng sheet bn dùng lnh .to_excel(). Sau khi ghi tt c các sheet bn kt thúc vi writer.save()  lu file writer = pd.ExcelWriter(&#39;mul_sheets.xlsx&#39;, mode=&#39;w&#39;, engine=&#39;openpyxl&#39;) df1.to_excel(writer, sheet_name=&#39;Sheet1&#39;) df2.to_excel(writer, sheet_name=&#39;Sheet2&#39;) df3.to_excel(writer, sheet_name=&#39;Sheet3&#39;) writer.save() Mo: Có th dùng with  m file  tránh trng hp quên gi lnh .save(), lnh with s t ng lu file sau khi kt thúc các lnh con trong nó import pandas as pd df1 = pd.DataFrame({&#39;col_1&#39;: [2, 3, 4, 5]}) df2 = pd.DataFrame({&#39;col_1&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]}) df3 = pd.DataFrame({&#39;col_1&#39;: [True, True, False, False]}) sheet_names = [&#39;Sheet1&#39;,&#39;Sheet2&#39;, &#39;Sheet3&#39;] with pd.ExcelWriter(&#39;mul_sheets.xlsx&#39;, mode=&#39;a&#39;, if_sheet_exists=&#39;new&#39;, engine=&#39;openpyxl&#39;) as writer: for df, sheet_name in zip([df1, df2, df3], sheet_names): df.to_excel(writer, sheet_name) 2.1.3 JSON 2.1.3.1 c file JSON là 1 dng d liu khá ph bin trong thc t. Pandas h tr c file JSON theo phng thc sau pd.read_json(path_or_buf=None, orient=None,...) Trong ó: path_or_buf: là ng dn n file json hoc Object cho trc orient: Kiu cu trúc ca json split: D liu có dng dictionary theo cu trúc {index -&gt; [index], columns - [columns], data -&gt; [values]} records: D liu có dng danh sách các dictionary theo cu trúc [{column -&gt; value}, ... , {column -&gt; value}] index: D liu dng dictionary theo cu trúc {\"index\" -&gt; {\"column\" -&gt; \"value\"}} columns: D liu dng dictionary theo cu trúc {column -&gt; {index -&gt; value}} values: danh sách các giá tr Ngoài ra còn các tham s khác na nh chunksize, nrow, các bn có th tham kho ti pd.read_json() Di ây là file sample_pokemon.json vi các cu trúc nh sau Cu trúc records [{&quot;name&quot;:&quot;Bulbasaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;0.71 m&quot;,&quot;weight&quot;:&quot;6.9 kg&quot;}, {&quot;name&quot;:&quot;Ivysaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;0.99 m&quot;,&quot;weight&quot;:&quot;13.0 kg&quot;}, {&quot;name&quot;:&quot;Venusaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;2.01 m&quot;,&quot;weight&quot;:&quot;100.0 kg&quot;}, {&quot;name&quot;:&quot;Charmander&quot;,&quot;type&quot;:[&quot;Fire&quot;],&quot;height&quot;:&quot;0.61 m&quot;,&quot;weight&quot;:&quot;8.5 kg&quot;}, {&quot;name&quot;:&quot;Charmeleon&quot;,&quot;type&quot;:[&quot;Fire&quot;],&quot;height&quot;:&quot;1.09 m&quot;,&quot;weight&quot;:&quot;19.0 kg&quot;}] ta có th gi df = pd.read_json(&#39;sample_pokemon.json&#39;, orient=&#39;records&#39;) df.head() name type height weight 0 Bulbasaur [Grass, Poison] 0.71 m 6.9 kg 1 Ivysaur [Grass, Poison] 0.99 m 13.0 kg 2 Venusaur [Grass, Poison] 2.01 m 100.0 kg 3 Charmander [Fire] 0.61 m 8.5 kg 4 Charmeleon [Fire] 1.09 m 19.0 kg Tng t vi cu trúc split {&quot;index&quot;: [0,1,2,3,4], &quot;columns&quot;: [&quot;name&quot;,&quot;type&quot;,&quot;height&quot;,&quot;weight&quot;], &quot;data&quot;: [[&quot;Bulbasaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;0.71 m&quot;,&quot;6.9 kg&quot;], [&quot;Ivysaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;0.99 m&quot;,&quot;13.0 kg&quot;], [&quot;Venusaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;2.01 m&quot;,&quot;100.0 kg&quot;], [&quot;Charmander&quot;,[&quot;Fire&quot;],&quot;0.61 m&quot;,&quot;8.5 kg&quot;], [&quot;Charmeleon&quot;,[&quot;Fire&quot;],&quot;1.09 m&quot;,&quot;19.0 kg&quot;]]} ta có th gi df = pd.read_json(&#39;sample_pokemon.json&#39;, orient=&#39;split&#39;) df.head() Các cu trúc còn li index {&quot;0&quot;:{&quot;name&quot;:&quot;Bulbasaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;0.71 m&quot;,&quot;weight&quot;:&quot;6.9 kg&quot;}, &quot;1&quot;:{&quot;name&quot;:&quot;Ivysaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;0.99 m&quot;,&quot;weight&quot;:&quot;13.0 kg&quot;}, &quot;2&quot;:{&quot;name&quot;:&quot;Venusaur&quot;,&quot;type&quot;:[&quot;Grass&quot;,&quot;Poison&quot;],&quot;height&quot;:&quot;2.01 m&quot;,&quot;weight&quot;:&quot;100.0 kg&quot;}, &quot;3&quot;:{&quot;name&quot;:&quot;Charmander&quot;,&quot;type&quot;:[&quot;Fire&quot;],&quot;height&quot;:&quot;0.61 m&quot;,&quot;weight&quot;:&quot;8.5 kg&quot;}, &quot;4&quot;:{&quot;name&quot;:&quot;Charmeleon&quot;,&quot;type&quot;:[&quot;Fire&quot;],&quot;height&quot;:&quot;1.09 m&quot;,&quot;weight&quot;:&quot;19.0 kg&quot;}} columns {&quot;name&quot;:{&quot;0&quot;:&quot;Bulbasaur&quot;, &quot;1&quot;:&quot;Ivysaur&quot;, &quot;2&quot;:&quot;Venusaur&quot;, &quot;3&quot;:&quot;Charmander&quot; &quot;4&quot;:&quot;Charmeleon&quot;}, &quot;type&quot;:{&quot;0&quot;:[&quot;Grass&quot;,&quot;Poison&quot;], &quot;1&quot;:[&quot;Grass&quot;,&quot;Poison&quot;], &quot;2&quot;:[&quot;Grass&quot;,&quot;Poison&quot;], &quot;3&quot;:[&quot;Fire&quot;], &quot;4&quot;:[&quot;Fire&quot;]}, &quot;height&quot;:{&quot;0&quot;:&quot;0.71 m&quot;, &quot;1&quot;:&quot;0.99 m&quot;, &quot;2&quot;:&quot;2.01 m&quot;, &quot;3&quot;:&quot;0.61 m&quot;, &quot;4&quot;:&quot;1.09 m&quot;}, &quot;weight&quot;:{&quot;0&quot;:&quot;6.9 kg&quot;, &quot;1&quot;:&quot;13.0 kg&quot;, &quot;2&quot;:&quot;100.0 kg&quot;, &quot;3&quot;:&quot;8.5 kg&quot;, &quot;4&quot;:&quot;19.0 kg&quot;}} values [[&quot;Bulbasaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;0.71 m&quot;,&quot;6.9 kg&quot;], [&quot;Ivysaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;0.99 m&quot;,&quot;13.0 kg&quot;], [&quot;Venusaur&quot;,[&quot;Grass&quot;,&quot;Poison&quot;],&quot;2.01 m&quot;,&quot;100.0 kg&quot;], [&quot;Charmander&quot;,[&quot;Fire&quot;],&quot;0.61 m&quot;,&quot;8.5 kg&quot;], [&quot;Charmeleon&quot;,[&quot;Fire&quot;],&quot;1.09 m&quot;,&quot;19.0 kg&quot;]] Lu ý: pd.read_json() mc nh orient='records'. Các cu trúc records và index là các cu trúc JSON thng gp. values không phi cu trúc JSON. có th truyn link file thay vì file c lu  máy. 2.1.4 Pickle 2.1.4.1 c file 2.1.4.2 Xut file 2.2 Cu hình pandas "],["Chuong-3.html", "Chng 3 Mt s hàm c bn 3.1 .head() và .tail() 3.2 .shape và .size 3.3 .info() 3.4 .describe() 3.5 .index 3.6 .memory_usage() 3.7 Ly Series trong pandas 3.8 .astype() 3.9 .drop_duplicates() 3.10 .value_counts() 3.11 .unique() và .nunique() 3.12 .drop() 3.13 .rename() 3.14 .set_index() 3.15 .sort_values", " Chng 3 Mt s hàm c bn df = pd.read_csv(&#39;https://raw.githubusercontent.com/lhduc94/kungfupandas/master/data/sales_subset.csv&#39;,index_col=[&#39;Unnamed: 0&#39;]) 3.1 .head() và .tail() Phng thc .head(n=5) hin th n dòng u tiên ca DataFrame, ngc li phng thc .tail(n=5) hin th n dòng cui cùng ca DataFrame In [1]: df.head() Out[1]: store type department date weekly_sales is_holiday \\ 0 1 A 1 2010-02-05 24924.50 False 1 1 A 1 2010-03-05 21827.90 False 2 1 A 1 2010-04-02 57258.43 False 3 1 A 1 2010-05-07 17413.94 False 4 1 A 1 2010-06-04 17558.09 False temperature_c fuel_price_usd_per_l unemployment 0 5.727778 0.679451 8.106 1 8.055556 0.693452 8.106 2 16.816667 0.718284 7.808 3 22.527778 0.748928 7.808 4 27.050000 0.714586 7.808 In [2]: df.tail() Out[2]: store type department date weekly_sales is_holiday \\ 10769 39 A 99 2011-12-09 895.00 False 10770 39 A 99 2012-02-03 350.00 False 10771 39 A 99 2012-06-08 450.00 False 10772 39 A 99 2012-07-13 0.06 False 10773 39 A 99 2012-10-05 915.00 False temperature_c fuel_price_usd_per_l unemployment 10769 9.644444 0.834256 7.716 10770 15.938889 0.887619 7.244 10771 27.288889 0.911922 6.989 10772 25.644444 0.860145 6.623 10773 22.250000 0.955511 6.228 3.2 .shape và .size Phng thc .shape cho bit s lng dòng và ct ca bng In [3]: df.shape Out[3]: (10774, 9) Trong dó 10774 là s lng dòng ca bng và 9 là s lng ct ca bng Phng thc .size cho bit s lng phn t ca bng In [4]: df.size Out[4]: 96966 3.3 .info() Phng thc .info() dùng  xem mt s thông tin c bn nh Index ca bng Tên các ct, s lng các phn t Null trong ct và kiu d liu ca chúng S lng các kiu d liu Dung lng ca bng Ví d In [5]: df.info() Out[5]: &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10774 entries, 0 to 10773 Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 store 10774 non-null int64 1 type 10774 non-null object 2 department 10774 non-null int64 3 date 10774 non-null object 4 weekly_sales 10774 non-null float64 5 is_holiday 10774 non-null bool 6 temperature_c 10774 non-null float64 7 fuel_price_usd_per_l 10774 non-null float64 8 unemployment 10774 non-null float64 dtypes: bool(1), float64(4), int64(2), object(2) memory usage: 768.1+ KB Mo: Phng thc .info() có các tham s  tùy chnh các thông tin có th xem. Bn có th gii hn các thông tin theo các tham s di ây info(verbose=None, buf=None, max_cols=None, memory_usage=None, show_counts=None, null_counts=None) 3.4 .describe() Phng thc .describe() a ra mt s thng kê n gin nh count, mean, std, min, max và percentiles = [0.25, 0.5, 0.75]. Phng thc này ch áp dng cho các ct  dng numerical. In [6]: df.describe() Out[6]: store department weekly_sales temperature_c \\ count 10774.000000 10774.000000 10774.000000 10774.000000 mean 15.441897 45.218118 23843.950149 15.731978 std 11.534511 29.867779 30220.387557 9.922446 min 1.000000 1.000000 -1098.000000 -8.366667 25% 4.000000 20.000000 3867.115000 7.583333 50% 13.000000 40.000000 12049.065000 16.966667 75% 20.000000 72.000000 32349.850000 24.166667 max 39.000000 99.000000 293966.050000 33.827778 fuel_price_usd_per_l unemployment count 10774.000000 10774.000000 mean 0.749746 8.082009 std 0.059494 0.624355 min 0.664129 3.879000 25% 0.708246 7.795000 50% 0.743381 8.099000 75% 0.781421 8.360000 max 1.107674 9.765000 Mo: Bn có th thay i thông s percentiles bng cách truyn tham s này vào trong .describe() Ví d In [7]: df.describe(percentiles=[0.1, 0.99])) Out[7]: store department weekly_sales temperature_c \\ count 10774.000000 10774.000000 10774.000000 10774.000000 mean 15.441897 45.218118 23843.950149 15.731978 std 11.534511 29.867779 30220.387557 9.922446 min 1.000000 1.000000 -1098.000000 -8.366667 10% 2.000000 8.000000 607.695000 2.577778 50% 13.000000 40.000000 12049.065000 16.966667 99% 39.000000 99.000000 142193.400300 32.388889 max 39.000000 99.000000 293966.050000 33.827778 fuel_price_usd_per_l unemployment count 10774.000000 10774.000000 mean 0.749746 8.082009 std 0.059494 0.624355 min 0.664129 3.879000 10% 0.687640 7.127000 50% 0.743381 8.099000 99% 0.978565 9.765000 max 1.107674 9.765000 Lu ý: pandas mc nh tính thêm percentile ti 0.5 dù không truyn vào 3.5 .index Thuc tính .index  ly index ca DataFrame hoc Series. Ví d In [8]: df.index Out[8]: Int64Index([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 10764, 10765, 10766, 10767, 10768, 10769, 10770, 10771, 10772, 10773], dtype=&#39;int64&#39;, length=10774) 3.6 .memory_usage() Phng thc .memory_usage(index=True, deep=False) giúp thông kê dung lng ca tng ct. Trong ó index tr v dung lng ca phn ánh index và deep nu t giá tr True s tr v cách tính toán sâu hn v b nh cho kiu object Ví d In [9]: df.memory_usage(index=False) Out[9]: store 86192 type 86192 department 86192 date 86192 weekly_sales 86192 is_holiday 10774 temperature_c 86192 fuel_price_usd_per_l 86192 unemployment 86192 dtype: int64 In [10]: df.memory_usage(deep=True) Out[10]: Index 86192 store 86192 type 624892 department 86192 date 721858 weekly_sales 86192 is_holiday 10774 temperature_c 86192 fuel_price_usd_per_l 86192 unemployment 86192 dtype: int64 3.7 Ly Series trong pandas S dng [&lt;tên ct&gt;]  ly 1 Series ca bng. Ví d  ly Series ca ct department ta làm nh sau In [11]: df[&#39;department&#39;] Out[11]: 0 1 1 1 2 1 3 1 4 1 .. 10769 99 10770 99 10771 99 10772 99 10773 99 Name: department, Length: 10774, dtype: int64 nhng Series này cng có th áp dng các phng thc tng t ca DataFrame nh .head(), .tail(). 3.8 .astype() Vi phng thc .astype() ta có th ép kiu d liu ca ct v dng khác. Vic ép kiu này giúp thay i kiu d liu  tin các thao tác nh ni 2 ct có 2 kiu str và int, ngoài ra vic ép kiu cng giúp gim c dung lng b nh dành cho bng.  ví d trên, ta thy ct department có giá tr max là 99 nhng c mc nh là int64 khá lãng phí, do ó ép kiu v int8 Trc khi ép kiu In [12]: df[&#39;department&#39;].dtypes Out[12]: dtype(&#39;int64&#39;) In [13]: df[&#39;department&#39;].memory_usage() - df[&#39;department&#39;].index.memory_usage() Out[13]: 86192 Sau khi ép kiu In [14]: df[&#39;department&#39;].astype(&#39;int8&#39;).memory_usage() - df[&#39;department&#39;].index.memory_usage() Out[14]: 10774 Ta thy sau khi ép kiu thì b nh lu tr ca ct department gim i 8 ln. Lu ý: df['department'].memory_usage() tr v dung lng lu tr ca ct department và dung lng lu tr ca index 3.9 .drop_duplicates() Phng thc này tr v DataFrame ã c loi b các hàng trùng nhau. Lnh thc hin DataFrame.drop_duplicates(subset=None, keep=&#39;first&#39;, inplace=False, ignore_index=False) Trong ó: subset: tên ct hoc danh sách các ct cn lc giá tr trùng lp, nu không truyn vào s mc nh chn tt c các ct keep: các kiu lc duplicate bao gm các la chn sau: 'first': loi b các dòng bn sao, ch gi li dòng u tiên 'last': loi b các dòng bn sao, ch gi li dòng cui cùng False: loi tt c các dòng trùng lp inplace: thao tác trc tip trên bng nu  giá tr True hoc to 1 bn sao vi giá tr False ignore_index: Nu True tr v index ánh s li t 0 n n-1 Ví d In [15]: df = pd.DataFrame({ &#39;action&#39;: [&#39;view&#39;, &#39;view&#39;, &#39;add to cart&#39;, &#39;add to cart&#39;, &#39;add to cart&#39;,], &#39;fruit&#39;: [&#39;orange&#39;, &#39;orange&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;apple&#39;], &#39;times&#39;: [ 1, 1, 3, 2, 4] }) In [16]: df Out[16]: action fruit times 0 view orange 1 1 view orange 1 2 add to cart orange 3 3 add to cart apple 2 4 add to cart apple 4 In [17]: df.drop_duplicates() Out[17]: action fruit times 0 view orange 1 2 add to cart orange 3 3 add to cart apple 2 4 add to cart apple 4 In [18]: df.drop_duplicates(subset=[&#39;action&#39;]) Out[18]: action fruit times 0 view orange 1 2 add to cart orange 3 In [19]: df.drop_duplicates(subset=[&#39;action&#39;,&#39;fruit&#39;], keep=&#39;last&#39;, ignore_index=True) action fruit times 0 view orange 1 1 add to cart orange 3 2 add to cart apple 4 3.10 .value_counts() Phng thc này tr s ln xut hin ca các phn t trong Series. Kt qu tr v mc nh s sp xp theo s ln xut hin gim dn và mc nh b qua các giá tr null Series.value_counts(normalize=False, sort=True, ascending=False, bins=None, dropna=True) Trong ó: normalize: True s tr v t l xut hin ca các phn t sort: True s tr v kt qu sp xp theo s ln xut hin, False s tr v kt qu sp xp theo trình t xut hin ca phn t ascending: True s tr v kt qu sp xp theo s ln xut hin tng dn. bins: gom nhóm các phn t, tng t pd.cut dropna: False s m tt c các phn t k c null Ví d In [19]: s = pd.Series([3, 1, 2, 3, np.nan, 4, np.nan]) In [20]: s.value_counts() Out[20]: 3.0 2 1.0 1 2.0 1 4.0 1 dtype: int64 In [21]: s.value_counts(normalize=True, sort=False, dropna=False) Out[21]: 3.0 0.285714 1.0 0.142857 2.0 0.142857 NaN 0.285714 4.0 0.142857 dtype: float64 In [22]: s.value_counts(bins=3) Out[22]: (0.996, 2.0] 2 (2.0, 3.0] 2 (3.0, 4.0] 1 dtype: int64 3.11 .unique() và .nunique() Phng thc .unique() tr v các giá tr khác nhau ca Series và .nunique() tr v s lng các giá tr khác nhau ca Series. Kt qu tr v ca .unique() là danh sách các phn t c sp xp theo th t u vào ca bng.  loi b giá tr NA trong lúc m có th gi .nunique(dropna=False) Cách s dng In [23]: s = pd.Series([2, 3, 1 ,2, np.nan], name=&#39;col_0&#39;) In [24]: s Out[24]: 0 2.0 1 3.0 2 1.0 3 2.0 4 NaN Name: col_0, dtype: float64 In [25]: s.unique() Out[25]: array([ 2., 3., 1., nan]) In [26]: s.nunique(dropna=False) Out[26]: 4 3.12 .drop() Phng thc .drop() dùng  loi b các dòng hoc ct theo ch nh. Cú pháp ca .drop() nh sau DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors=&#39;raise&#39;) Trong ó: labels: Tên ct hoc dòng cn loi b. axis: Mc inh giá tr 0 loi b theo dòng và 1 loi b theo ct. index: Ch nh index ca dòng cn loi b, tng ng labels, axis=0 columns: Ch nh ct cn loi b, tng ng labels, axis=1 level: Dành cho MultiIndex, khi ó ch nh cp  index cn loi b inplace: Thc hin trên chính bng hay to ra mt bng sao errors: mc nh raise s tr ra li và ignore nu mun b qua li. Ví d In [27]: df = pd.DataFrame(np.arange(16).reshape(4, 4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], index=[&#39;A&#39;, &#39;1A&#39;, &#39;2A&#39;, &#39;3A&#39;]) In [28]: df Out[28]: A B C D A 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [29]: df.drop(&#39;A&#39;) Out[29]: A B C D 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [30]: df.drop(columns=[&#39;A&#39;, &#39;C&#39;]) Out[30]: B D A 1 3 1A 5 7 2A 9 11 3A 13 15 In [31]: df.drop(index=[&#39;A&#39;, &#39;2A&#39;]) Out[31]: A B C D 1A 4 5 6 7 3A 12 13 14 15 Lu ý: Thc t hay dùng các params columns và index  ch nh các dòng hay ct cn c loi b hn là dùng labels và axis 3.13 .rename() Phng thc .rename() dùng  i tên nhãn ca ct hoc dòng. Cú pháp nh sau DataFrame.rename(mapper=None, *, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors=&#39;ignore&#39;)[source] Trong ó: mapper: là mt danh sách dng dictionary cha key là tên cn i và value là tên mi. axis: Mc inh giá tr 0 thay i theo index và 1 thay i theo ct. index: Ch nh index ca dòng cn thay i, tng ng mapper, axis=0, thay th bng index=mapper columns: Ch nh ct cn thay i, tng ng mapper, axis=1, thay th bng columns=mapper copy: True, mc nh sao chép d liu level: Dành cho MultiIndex, khi ó ch nh cp  index cn i tên inplace: Thc hin trên chính bng hay to ra mt bng sao errors: mc nh raise s tr ra li và ignore nu mun b qua li. Ví d In [32]: df = pd.DataFrame(np.arange(16).reshape(4, 4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], index=[&#39;A&#39;, &#39;1A&#39;, &#39;2A&#39;, &#39;3A&#39;]) In [33]: df.rename(mapper={&#39;A&#39;:&#39;aA&#39;}) Out[33: A B C D aA 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [34]: df.rename(mapper={&#39;A&#39;:&#39;aA&#39;}, axis=1) Out[34]: aA B C D A 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [35]: df.rename(columns={&#39;A&#39;:&#39;aA&#39;, &#39;B&#39;:&#39;Bb&#39;}, index={&#39;A&#39;: &#39;OA&#39;,&#39;3A&#39;:&#39;3a&#39;}) Out[35]: aA Bb C D OA 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3a 12 13 14 15 Lu ý: Tng t nh .drop() thì columns và index thng c s dng hn là mapper và axis. Vn cha rõ copy dùng  làm gì. 3.14 .set_index() Phng thc .set_index() dùng  chuyn i mt ct ca bng thành index. Index này có th thay th index c hoc thêm vào  thành MultiIndex. Cách s dng nh sau: DataFrame.set_index(keys, drop=True, append=False, inplace=False, verify_integrity=False) Trong ó: keys: Có th truyn vào mt ct duy nht hoc danh sách các ct. Ngoài ra còn có th là 1 danh sách dng pd.Index, Series, np.array, iterator drop: loi b ct trong bng nu ã a vào index, mc nh là True append: mc nh là False ghi è lên index ã có. Giá tr True s thêm vào index sn có. inplace: Thc hin trc tip trên bng hoc to ra mt bn sao verify_integrity: Kim tra xem ct ánh index có cha các phn t trùng lp hay không. Ví d In [36]: df = pd.DataFrame(np.arange(16).reshape(4, 4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], index=[&#39;A&#39;, &#39;1A&#39;, &#39;2A&#39;, &#39;3A&#39;]) In [37]: df.index.name = &#39;index1&#39; In [38]: df Out[38]: A B C D index1 A 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [39]: df.set_index(&#39;A&#39;) Out[39]: B C D A 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 In [40]: df.set_index([&#39;A&#39;, &#39;B&#39;], append=True) Out[40]: C D index1 A B A 0 1 2 3 1A 4 5 6 7 2A 8 9 10 11 3A 12 13 14 15 In [41]: df.set_index([pd.Index([1, 2, 3, 4], name=&#39;new_index&#39;)]) Out[41]: A B C D new_index 1 0 1 2 3 2 4 5 6 7 3 8 9 10 11 4 12 13 14 15 Lu ý: keys không áp dng cho kiu list, tuple nhng Iterator ca nó thì c. Ví d khi a list vào s báo li In [42]: df.set_index([1, 2, 3, 4]) Out[42]: --------------------------------------------------------------------------- KeyError Traceback (most recent call last) ~\\AppData\\Local\\Temp/ipykernel_1380/3577861036.py in &lt;module&gt; ----&gt; 1 df.set_index([1, 2, 3, 4]) D:\\Vendors\\anaconda\\lib\\site-packages\\pandas\\util\\_decorators.py in wrapper(*args, **kwargs) 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) 312 313 return wrapper D:\\Vendors\\anaconda\\lib\\site-packages\\pandas\\core\\frame.py in set_index(self, keys, drop, append, inplace, verify_integrity) 5492 5493 if missing: -&gt; 5494 raise KeyError(f&quot;None of {missing} are in the columns&quot;) 5495 5496 if inplace: KeyError: &#39;None of [1, 2, 3, 4] are in the columns&#39; Trong khi a vào Iterator thì hot ng. In [43]: df.set_index(iter([1, 2, 3, 4])) Out[43]: A B C D 1 0 1 2 3 2 4 5 6 7 3 8 9 10 11 4 12 13 14 15 3.15 .sort_values DataFrame.sort_values(by, axis=0, ascending=True, inplace=False, kind=&#39;quicksort&#39;, na_position=&#39;last&#39;, ignore_index=False, key=None) Trong ó: by: nhãn hoc danh sách các nhãn axis: Thc thi theo dòng {0 hoc index} hoc ct {1 hoc columns} ascending: bool hoc danh sách các bool th hin sp xp theo tng dn hoc gim dn. Mc nh True inplace: Thc thi trên chính bng hoc to mt bn sao. kind: La chn thut toán sp xp na_position: a NaN lên u hoc cui ignor_index: Nu  giá tr True s ánh index li t 0 -&gt; n-1 key: áp dng hàm vào lúc sort In []: df = pd.DataFrame({ &#39;col1&#39;: [&#39;A&#39;, &#39;A&#39;, &#39;B&#39;, np.nan, &#39;D&#39;, &#39;C&#39;], &#39;col2&#39;: [2, 1, 9, 8, 7, 4], &#39;col3&#39;: [0, 1, 9, 4, 2, 3], &#39;col4&#39;: [&#39;a&#39;, &#39;B&#39;, &#39;c&#39;, &#39;D&#39;, &#39;e&#39;, &#39;F&#39;]}) In []: df col1 col2 col3 col4 0 A 2 0 a 1 A 1 1 B 2 B 9 9 c 3 NaN 8 4 D 4 D 7 2 e 5 C 4 3 F Sp xp theo col1 In []: df.sort_values(by=[&#39;col1&#39;]) Out[]: col1 col2 col3 col4 0 A 2 0 a 1 A 1 1 B 2 B 9 9 c 5 C 4 3 F 4 D 7 2 e 3 NaN 8 4 D Sp xp theo nhiu ct và ch nh hng sp xp In []: df.sort_values(by=[&#39;col1&#39;, &#39;col2&#39;] , ascending=[False, True]) Out[]: col1 col2 col3 col4 4 D 7 2 e 5 C 4 3 F 2 B 9 9 c 1 A 1 1 B 0 A 2 0 a 3 NaN 8 4 D t NaN lên u In []: df.sort_values(by=[&#39;col1&#39;, &#39;col2&#39;] , ascending=False, na_position=&#39;first&#39;) Out[]: col1 col2 col3 col4 3 NaN 8 4 D 4 D 7 2 e 5 C 4 3 F 2 B 9 9 c 0 A 2 0 a 1 A 1 1 B Sp xp vi key function In []: df.sort_values(by=&#39;col4&#39;, key=lambda col: col.str.lower()) Out[]: col1 col2 col3 col4 0 A 2 0 a 1 A 1 1 B 2 B 9 9 c 3 NaN 8 4 D 4 D 7 2 e 5 C 4 3 F "],["selecting-và-filtering.html", "Chng 4 Selecting và Filtering 4.1 S dng [] 4.2 .loc và .iloc 4.3 Lc theo iu kin", " Chng 4 Selecting và Filtering 4.1 S dng [] Cú pháp [] là cú pháp n gin nht  ly bng con ca 1 bng cho trc. Vi 1 df là 1 DataFrame có index là region và d liu nh sau state individuals family_members state_pop region East South Central Alabama 2570.0 864.0 4887681 Pacific Alaska 1434.0 582.0 735139 Mountain Arizona 7259.0 2606.0 7158024 West South Central Arkansas 2280.0 432.0 3009733 Pacific California 109008.0 20964.0 39461588 Mountain Colorado 7607.0 3250.0 5691287  chn 1 bng con có 2 ct ['state', 'family_members'] ta làm nh sau In [1]: df[[&#39;state&#39;, &#39;family_members&#39;]] Out[1]: state family_members region East South Central Alabama 864.0 Pacific Alaska 582.0 Mountain Arizona 2606.0 West South Central Arkansas 432.0 Pacific California 20964.0 Mountain Colorado 3250.0  ly theo dòng ta dùng tng t Series In [2]: df[:3] Out[2]: state individuals family_members state_pop region East South Central Alabama 2570.0 864.0 4887681 Pacific Alaska 1434.0 582.0 735139 Mountain Arizona 7259.0 2606.0 7158024 In [3]: df[2:5] Out[3]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 West South Central Arkansas 2280.0 432.0 3009733 Pacific California 109008.0 20964.0 39461588 Lu ý: df[['state']] s tr v DataFrame trong khi df['state'] tr v Series. i vi ly theo dòng, [] không ly c theo dòng riêng bit. [] ch ly d liu theo dòng hoc ct, không thc hin c cùng lúc c hai thao tác. Ví d khi gi df[3] hay df[[1, 2, 3]] s báo li KeyError 4.2 .loc và .iloc 4.2.1 .loc Phng thc .loc dùng  ly d liu theo ct hoc hàng da theo nhãn nh sn (Tên hàng, tên ct), ngoài ra .loc còn nhn các giá tr boolean. u vào ca .loc có th gm: Nhãn n: là 1 s 3 hoc dng ch a, lu ý rng s này là nhãn ca index ch không phi v trí ca dòng. Danh sách các nhãn : ['a', 'b', 'c'] i tng dng slice ví d 'a':'e' Danh sách kiu bool có  dài bng vi s lng dòng Series dng bool pd.Index S dng nhãn n, kt qu tr v là các dòng có nhãn ging nh nhãn trong .loc In [4]: df.loc[&#39;Pacific&#39;] Out[4]: state individuals family_members state_pop region Pacific Alaska 1434.0 582.0 735139 Pacific California 109008.0 20964.0 39461588 Lu ý: Khi kt qu là nhiu dòng thì d liu tr v có kiu DataFrame, trong khi nu ch có 1 dòng duy nht thì kt qu tr v s theo kiu Series In [5]: type(df.loc[&#39;Pacific&#39;]) Out[5]: &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; In [6]: type(df.loc[&#39;West South Central&#39;]) Out[6]: &lt;class &#39;pandas.core.series.Series&#39;&gt; Khi a danh sách các nhãn dùng .loc[[]] thì nhãn a vào là nhãn ca index. Nu a tên các ct s b báo li KeyError In [7]: df.loc[[&#39;Pacific&#39;, &#39;Mountain&#39;]] Out[7]: state individuals family_members state_pop region Pacific Alaska 1434.0 582.0 735139 Pacific California 109008.0 20964.0 39461588 Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287  ly nhãn n theo nhãn ca index và tên column ta truyn vào phn nhãn ca index trc và nhãn ca column sau và phân bit bi du phy In [7]: df.loc[&#39;Pacific&#39;, &#39;state&#39;] Out[7]: region Pacific Alaska Pacific California Name: state, dtype: object  ly nhiu hn 1 nhãn ca index hoc nhiu hn 1 nhãn ca column ta ch cn thay th nhãn n ca index thành danh sách hoc slice, tng t ta có th thay th nhãn n thành danh sách hoc slice ca column In [8]: df.loc[&#39;Pacific&#39;, [&#39;individuals&#39;, &#39;family_members&#39;]]) Out[8]: individuals family_members region Pacific 1434.0 582.0 Pacific 109008.0 20964.0 In [9]: df.loc[&#39;Pacific&#39;, &#39;individuals&#39;:&#39;state_pop&#39;] Out[9]: individuals family_members state_pop region Pacific 1434.0 582.0 735139 Pacific 109008.0 20964.0 39461588 Lu ý: Dùng slice s ly theo th t xut hin ch không ly theo th t sp xp t in, nh ví d trên thì mc dù family_members &gt; individuals nhng vn xp sau. Slice không áp dng c cho index có nhãn trùng nhau, nu dùng s báo li KeyError: \"Cannot get right slice bound for non-unique label: Danh sách dng boolean, ch s dng cho index, không dùng cho column In [10]: df.loc[[False, True, False, True, False, False]] Out[10]: state individuals family_members state_pop region Pacific Alaska 1434.0 582.0 735139 West South Central Arkansas 2280.0 432.0 3009733 Series boolean In [11]: s = pd.Series([False, True, False, True, False, False], index=[&#39;East South Central&#39;, &#39;Pacific&#39;, &#39;Mountain&#39;, &#39;West South Central&#39;, &#39;Pacific&#39;, &#39;Mountain&#39;]) In [12]: df.loc[s] Out[12]: state individuals family_members state_pop region Pacific Alaska 1434.0 582.0 735139 West South Central Arkansas 2280.0 432.0 3009733 pd.Index In [13]: df.loc[pd.Index([&quot;Pacific&quot;, &quot;East South Central&quot;], name=&quot;meow&quot;)] Out[13]: state individuals family_members state_pop meow Pacific Alaska 1434.0 582.0 735139 Pacific California 109008.0 20964.0 39461588 East South Central Alabama 2570.0 864.0 4887681 Select vi MultiIndex individuals family_members state_pop region state Mountain Arizona 7259.0 2606.0 7158024 Colorado 7607.0 3250.0 5691287 Idaho 1297.0 715.0 1750536 Pacific Alaska 1434.0 582.0 735139 California 109008.0 20964.0 39461588 Hawaii 4131.0 2399.0 1420593 Vi nhãn n In [14]: df.loc[&#39;Mountain&#39;] Out[14]: individuals family_members state_pop state Arizona 7259.0 2606.0 7158024 Colorado 7607.0 3250.0 5691287 Idaho 1297.0 715.0 1750536 Lu ý: Vi MultiIndex,các index s xp theo th t t level 0 n n (level 0 cao hn level 1 ), vi nhãn n là nhãn ca 1 index thì ch thc hin c index level u tiên, các index level sau s báo li. Theo nh ví d trên thì region có level cao hn state nên ch gi c .loc['Mountain'] còn .loc['Arizona'] s báo li  select nhiu index cùng lúc, ta truyn vào tuple(label1, label2...) theo th t index có level t cao n thp In [15]: df.loc[(&#39;Mountain&#39;, &#39;Colorado&#39;)] Out[15]: individuals 7607.0 family_members 3250.0 state_pop 5691287.0 Name: (Mountain, Colorado), dtype: float64 Tng t ta cùng có select theo các column cho trc In [16]: df.loc[(&#39;Mountain&#39;, &#39;Colorado&#39;), [&#39;individuals&#39;, &#39;family_members&#39;]] Out[16]: individuals 7607.0 family_members 3250.0 Name: (Mountain, Colorado), dtype: float64 Mo: Có th select index  các level sau bng cách dùng slice In [17]: df.loc[(slice(None), &#39;Arizona&#39;), :] Out[17]: individuals family_members state_pop region state Mountain Arizona 7259.0 2606.0 7158024 Slice cho MultiIndex Slice t 1 tuple nhãn n mt nhãn n In [18]: df.loc[(&#39;Mountain&#39;, &#39;Colorado&#39;):&#39;Pacific&#39;] Out[18]: individuals family_members state_pop region state Mountain Colorado 7607.0 3250.0 5691287 Idaho 1297.0 715.0 1750536 Pacific Alaska 1434.0 582.0 735139 California 109008.0 20964.0 39461588 Hawaii 4131.0 2399.0 1420593 Lu ý: Nhãn n phía sau phi có cùng level vi nhãn u tiên trong tuple. Trong ví d trên nu thay Pacific thành Hawaii s tr v rng. Nhng khi truyn nhãn không nm trong các nhãn ca index thì vn có kt qu tr v In [19]: df.loc[(&#39;Mountain&#39;, &#39;Colorado&#39;): &#39;meow&#39;] Out[19]: individuals family_members state_pop region state Mountain Colorado 7607.0 3250.0 5691287 Idaho 1297.0 715.0 1750536 Pacific Alaska 1434.0 582.0 735139 California 109008.0 20964.0 39461588 Hawaii 4131.0 2399.0 1420593 Slice t 1 tuple nhãn n mt tuple nhãn In [20]: df.loc[(&#39;Mountain&#39;, &#39;Colorado&#39;):(&#39;Pacific&#39;, &#39;California&#39;)] Out[20]: individuals family_members state_pop region state Mountain Colorado 7607.0 3250.0 5691287 Idaho 1297.0 715.0 1750536 Pacific Alaska 1434.0 582.0 735139 California 109008.0 20964.0 39461588 4.2.2 .iloc Phng thc .iloc dùng  ly d liu theo ct hoc hàng da theo index ca nó, ngoài ra .iloc còn nhn các giá tr boolean. u vào ca .iloc có th gm: Nhãn n: là 1 s 3 Danh sách các s : [1, 2, 3] i tng dng slice ví d 1:5 Danh sách kiu bool có  dài bng vi s lng dòng Ví d vi DataFrame state individuals family_members state_pop region East South Central Alabama 2570.0 864.0 4887681 Pacific Alaska 1434.0 582.0 735139 Mountain Arizona 7259.0 2606.0 7158024 West South Central Arkansas 2280.0 432.0 3009733 Pacific California 109008.0 20964.0 39461588 Mountain Colorado 7607.0 3250.0 5691287 Khi truyn 1 giá tr nguyên, .iloc tr v giá tr ca dòng ti v trí truyn vào vi kiu Series In [21]: df.iloc[0] Out[21]: state Alabama individuals 2570.0 family_members 864.0 state_pop 4887681 Name: East South Central, dtype: object Lu ý: Series tr v không cha nhãn ca index,  ây là nhãn East South Central ca index region  ly d liu theo ct, ví d mun ly ct family_members thì s truyn index ct là 2 In [22]: df.iloc[:, 2] Out[22]: region East South Central 864.0 Pacific 582.0 Mountain 2606.0 West South Central 432.0 Pacific 20964.0 Mountain 3250.0 Name: family_members, dtype: float64 Mo: .iloc bt buc truyn vào v trí ca ct, không cho phép tên ct. S dng .columns.get_loc(&lt;tên ct&gt;)  ly v trí ca ct In [23]: df.iloc[:, df.columns.get_loc(&#39;family_members&#39;)] Out[23]: region East South Central 864.0 Pacific 582.0 Mountain 2606.0 West South Central 432.0 Pacific 20964.0 Mountain 3250.0 Name: family_members, dtype: float64 Select theo danh sách, mc nh a vào 1 danh sách Pandas s hiu là ly theo các dòng In [24]: df.iloc[[1, 3 ,5]] Out[24]: individuals family_members state_pop region state Mountain Colorado 7607.0 3250.0 5691287 Pacific Alaska 1434.0 582.0 735139 Hawaii 4131.0 2399.0 1420593 Mo: Dòng lnh trên cng tng ng vi df.iloc[[1, 3 ,5], :], trong ó : dùng  ly toàn b Tng t  ly theo danh sách index các ct In [25]: df.iloc[:, [0, 2]] Out[25]: individuals state_pop region state Mountain Arizona 7259.0 7158024 Colorado 7607.0 5691287 Idaho 1297.0 1750536 Pacific Alaska 1434.0 735139 California 109008.0 39461588 Hawaii 4131.0 1420593 Slice c 2 chiu In [26]: df.iloc[2:4, 0:2] Out[26]: individuals family_members region state Mountain Idaho 1297.0 715.0 Pacific Alaska 1434.0 582.0 S dng danh sách các boolean # Theo dòng In [27]: df.iloc[[True, False, True, False, False, True], :] Out[27]: individuals family_members state_pop region state Mountain Arizona 7259.0 2606.0 7158024 Idaho 1297.0 715.0 1750536 Pacific Hawaii 4131.0 2399.0 1420593 #Theo ct In [28]: df.iloc[:, [False, True,False]] Out[28]: family_members region state Mountain Arizona 2606.0 Colorado 3250.0 Idaho 715.0 Pacific Alaska 582.0 California 20964.0 Hawaii 2399.0 4.3 Lc theo iu kin Các phng thc [], .loc hay .iloc ngoài vic ly d liu theo hàng và ct còn có th ly ra nhng bng con theo các iu kin cho trc. Bn cht các câu iu kin s tr v mt danh sách dng bolean và các hàm trên thc hin lc theo danh sách ó. Trc ht ta cn bit câu iu kin trong Pandas nh th nào. Ví d ta có 1 DataFrame nh sau state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 Mountain Idaho 1297.0 715.0 1750536 Pacific Alaska 1434.0 582.0 735139 Pacific California 109008.0 20964.0 39461588 Pacific Hawaii 4131.0 2399.0 1420593 4.3.1 Toán t iu kin Gi s ta có mt iu kin rng df['individuals'] &gt; 5000. Kt qu tr v là 1 Series In [28]: df[&#39;individuals&#39;] &gt; 5000 Out[28]: region Mountain True Mountain True Mountain False Pacific False Pacific True Pacific False Name: individuals, dtype: bool  lc theo iu kin này ta có các cách nh sau ## Dùng [] In [29]: df[df[&#39;individuals&#39;] &gt; 5000] Out[29]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 Pacific California 109008.0 20964.0 39461588 ## Dùng .loc In [30]: df.loc[df[&#39;individuals&#39;] &gt; 5000] Out[30]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 Pacific California 109008.0 20964.0 39461588 Lu ý: .iloc không nhn Series boolean nhng array thì có th. Do ó ta có th dùng .values  ly kt qu ca Câu iu kin ## Dùng .iloc In [31]: df.iloc[(df[&#39;individuals&#39;] &gt; 5000).values] Out[31]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 Pacific California 109008.0 20964.0 39461588 Ta cng có th áp nhiu iu kin cùng lúc, mi iu kin phi nm trong du ngoc n () và gia các kiu kin là toán t &amp; hoc | ## Nhiu câu iu kin trên mt ct In [32]: df.loc[(df[&#39;individuals&#39;] &gt; 5000) &amp; (df[&#39;individuals&#39;] &lt; 10000)] Out[32]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 ## Nhiu câu iu kin  nhiu ct In [33]: df.loc[(df[&#39;individuals&#39;] &gt; 5000) &amp; (df[&#39;family_members&#39;] &lt; 10000) Out[33]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 ## Mt câu iu kin trên nhiu ct In [34]: df[df[&#39;individuals&#39;] &gt; 5 * df[&#39;family_members&#39;]] Out[34]: state individuals family_members state_pop region Pacific California 109008.0 20964.0 39461588 Mo: Bn cng có th dùng loc  va lc các dòng tha iu kin, va chn các ct mun ly In []: df.loc[df[&#39;individuals&#39;] &gt; 5 * df[&#39;family_members&#39;], [&#39;individuals&#39;, &#39;family_members&#39;]] Out[]: individuals family_members region Pacific 109008.0 20964.0 Ngoài ra, pandas còn cho phép bn lc vi cu trúc câu truy vn bng .query theo cú pháp DataFrame.query(expr, inplace=False, **kwargs) Trong ó: expr: là câu truy vn inplace: thc hin trên chính DataFrame ó hay to 1 bng sao **kwargs: keyword arguments Theo ví d trên,  thc hin lc theo iu kin df['individuals'] &gt; 5000 và df['family_members'] &lt; 10000 ta có th làm nh sau In [34]: df.query(&#39;individuals &gt; 500 and family_members &lt; 10000&#39;) Out[34]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Mountain Colorado 7607.0 3250.0 5691287 4.3.2 .isin() Phng thc .isin(values)  kim tra các phn t trong DataFrame hoc Series có nm trong values hay không. Ví d: In [35]: df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]) Out[35]: state individuals family_members state_pop region Mountain True True False False Mountain False False False False Mountain False False False False Pacific True False True False Pacific False False False False Pacific False False False False In [36]: df[&#39;state&#39;].isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;]) Out[36]: region Mountain True Mountain False Mountain False Pacific True Pacific False Pacific False Name: state, dtype: bool Ngoài ra bn có th truyn values là mt dictionary  kim tra cho tng ct theo tng tp giá tr In [37]: df.isin({&#39;state&#39;: [&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;], &#39;individuals&#39;: [7259, 582, 300]}) Out[37]: state individuals family_members state_pop region Mountain True True False False Mountain False False False False Mountain False False False False Pacific True False False False Pacific False False False False Pacific False False False False Lc vi .isin() In [38]: df[df[&#39;state&#39;].isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;])] Out[38]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Pacific Alaska 1434.0 582.0 735139 trong trng hp s dng .isin vi DataFrame, kt qu ca lc s tr v mt DataFrame vi giá tr các phn t mà phép isin tr v True, các phn t còn li tr giá tr NaN In [39]: df[df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300])] Out[39]: state individuals family_members state_pop region Mountain Arizona 7259.0 NaN NaN Mountain NaN NaN NaN NaN Mountain NaN NaN NaN NaN Pacific Alaska NaN 582.0 NaN Pacific NaN NaN NaN NaN Pacific NaN NaN NaN NaN Mo: Bn có dùng .any()  tng hp iu kin ca 1 DataFrame vi các phn t boolean .any(axis=1) : Ch cn tn ti 1 ct giá tr True, tr v giá tr True cho dòng .any(axis=0): Ch cn tn ti 1 dòng có giá tr True, tr v giá tr True cho ct. Phng thc .any() thng dùng  kim tra các dòng tn ti 1 ct giá tr NaN Lc vi .isin() và any(axis=1) In [40]: df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]).any(axis=1) Out[40]: region Mountain True Mountain False Mountain False Pacific True Pacific False Pacific False dtype: bool In [41]: df[df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]).any(axis=1)] Out[41]: state individuals family_members state_pop region Mountain Arizona 7259.0 2606.0 7158024 Pacific Alaska 1434.0 582.0 735139 Lc vi isin() và any(axis=0) In [42]: df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]).any(axis=0) Out[42]: state True individuals True family_members True state_pop False dtype: bool In [43]: df.loc[:,df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]).any(axis=0)] Out[43]: state individuals family_members region Mountain Arizona 7259.0 2606.0 Mountain Colorado 7607.0 3250.0 Mountain Idaho 1297.0 715.0 Pacific Alaska 1434.0 582.0 Pacific California 109008.0 20964.0 Pacific Hawaii 4131.0 2399.0 Lc vi isin() và any(axis=0) và any(axis=1) In []: bool_df = df.isin([&#39;Alaska&#39;, &#39;Oklahoma&#39;, &#39;Illinois&#39;, &#39;Arizona&#39;, 7259, 582, 300]) In []: df.loc[bool_df.any(axis=1), bool_df.any(axis=0)] Out[]: state individuals family_members region Mountain Arizona 7259.0 2606.0 Pacific Alaska 1434.0 582.0 4.3.3 Lc missing value vi .dropna() Trong quá trình x lý d liu, chúng ta thng gp nhng bng có cha giá tr missing value. Ví d bng missing_df state individuals family_members state_pop region Mountain Arizona 7259.0 NaN NaN Mountain Colorado NaN 3250.0 5691287.0 Mountain Idaho 1297.0 715.0 1750536.0 Pacific Alaska 1434.0 NaN 735139.0 Pacific California 109008.0 20964.0 39461588.0 Pacific Hawaii 4131.0 2399.0 NaN  lc d liu cha NaN ta dùng phng thc .dropna() DataFrame.dropna(axis=0, how=&#39;any&#39;, thresh=None, subset=None, inplace=False) Trong ó: axis: Nhn din lc theo dòng 0, index, hay ct 1, column how: Ch nh cách lc any: Nu có bt kì NA, loi b dòng hoc ct all: Nu tt c là NA, loi b dòng hoc ct thresh: S lng non-NA yêu cu subset: Ch nh các ct cn lc inplace: Thc hin trên chính DataFrame hay to bn sao. Lc b các hàng nu ít nht mt phn t NA In []: missing_df.dropna(axis=0) Out[]: state individuals family_members state_pop region Mountain Idaho 1297.0 715.0 1750536.0 Pacific California 109008.0 20964.0 39461588.0 Lc b các ct nu ít nht mt phn t NA In []: missing_df.dropna(axis=&#39;columns&#39;) Out[]: state region Mountain Arizona Mountain Colorado Mountain Idaho Pacific Alaska Pacific California Pacific Hawaii Lc b các dòng nu tt c phn t trong các ct ['family_members', 'state_pop'] là NA In []: missing_df.dropna(axis=&#39;index&#39;, how=&#39;all&#39;, subset=[&#39;family_members&#39;, &#39;state_pop&#39;]) Out[]: state individuals family_members state_pop region Mountain Colorado NaN 3250.0 5691287.0 Mountain Idaho 1297.0 715.0 1750536.0 Pacific Alaska 1434.0 NaN 735139.0 Pacific California 109008.0 20964.0 39461588.0 Pacific Hawaii 4131.0 2399.0 NaN Gi li các dòng có ít nht 3 phn t non-NA In []: missing_df.dropna(thresh=3) Out[]: state individuals family_members state_pop region Mountain Colorado NaN 3250.0 5691287.0 Mountain Idaho 1297.0 715.0 1750536.0 Pacific Alaska 1434.0 NaN 735139.0 Pacific California 109008.0 20964.0 39461588.0 Pacific Hawaii 4131.0 2399.0 NaN "],["tính-toán-trên-các-phn-t-trong-pandas.html", "Chng 5 Tính toán trên các phn t trong Pandas 5.1 S dng Vectorization 5.2 S dng apply 5.3 S dng iterator 5.4 So sánh các phng pháp lp 5.5 X lý song song trong pandas", " Chng 5 Tính toán trên các phn t trong Pandas df = pd.read_csv(&#39;data/big_mart_sales.csv&#39;) 5.1 S dng Vectorization Gi s nh mun to ct price= Item_Outlet_Sales * 5% In []: df[&#39;price&#39;] = df[&#39;Item_Outlet_Sales&#39;] * 0.05 In []: df[[&#39;Item_Outlet_Sales&#39;, &#39;price&#39;]] Out[]: Item_Outlet_Sales price 0 3735.1380 186.75690 1 443.4228 22.17114 2 2097.2700 104.86350 3 732.3800 36.61900 4 994.7052 49.73526 ... ... ... 8518 2778.3834 138.91917 8519 549.2850 27.46425 8520 1193.1136 59.65568 8521 1845.5976 92.27988 8522 765.6700 38.28350 Ni hai ct li vi nhau, Ví d ni Item_type và Item_Fat_Content thành Item_Type_Fat_Content ni Outlet_Identifier và Outlet_Establishment_Year thành Outlet_Identifier_Establishment_Year. Trong trng hp hp này Outlet_Establishment_Year thuc dng s nên  ni dng text và s ta ép kiu dng s v text s dng astype() df[&#39;Item_Type_Fat_Content&#39;] = df[&#39;Item_Type&#39;] + &#39;_&#39; + df[&#39;Item_Fat_Content&#39;] df[&#39;Outlet_Identifier_Establishment_Year&#39;] = df[&#39;Outlet_Identifier&#39;] + &#39;_&#39; +df[&#39;Outlet_Establishment_Year&#39;].astype(&#39;str&#39;) df[[&#39;Item_Type_Fat_Content&#39;, &#39;Outlet_Identifier_Establishment_Year&#39;]] Item_Type_Fat_Content Outlet_Identifier_Establishment_Year 0 Dairy_Low Fat OUT049_1999 1 Soft Drinks_Regular OUT018_2009 2 Meat_Low Fat OUT049_1999 3 Fruits and Vegetables_Regular OUT010_1998 4 Household_Low Fat OUT013_1987 ... ... ... 8518 Snack Foods_Low Fat OUT013_1987 8519 Baking Goods_Regular OUT045_2002 8520 Health and Hygiene_Low Fat OUT035_2004 8521 Snack Foods_Regular OUT018_2009 8522 Soft Drinks_Low Fat OUT046_1997 5.2 S dng apply Phng thc apply  thc thi mt hàm theo dòng hoc ct i vi Series Series.apply(func, convert_dtype=True, args=(), **kwargs) Trong ó: func: là hàm cn thc thi convert_dtype: Giá tr kiu boolean. Nu nó c t thành True (mc nh), x lý d liu s c gng tìm dtype tt hn cho các kt qu ca hàm func. Nu False, thì dtype s là type(object) args: Các i s ca hàm Ví d, thao tác Item_Outlet_Sales * 5% S dng lambda function In []: df[&#39;Item_Outlet_Sales&#39;].apply(lambda x: x * 0.05) Out[]: 0 186.75690 1 22.17114 2 104.86350 3 36.61900 4 49.73526 ... 8518 138.91917 8519 27.46425 8520 59.65568 8521 92.27988 8522 38.28350 Name: Item_Outlet_Sales, Length: 8523, dtype: float64 S dng hàm t nh ngha def set_price(x, k=0.05): return x * k In []: df[&#39;Item_Outlet_Sales&#39;].apply(set_price) Out[]: 0 186.75690 1 22.17114 2 104.86350 3 36.61900 4 49.73526 ... 8518 138.91917 8519 27.46425 8520 59.65568 8521 92.27988 8522 38.28350 Name: Item_Outlet_Sales, Length: 8523, dtype: float64 Có th truyn tham s k vào hàm set_price bng hai cách # Cách 1 - Dùng lambda In []: df[&#39;Item_Outlet_Sales&#39;].apply(lambda x: set_price(x, 0.1)) # Cách 2 - Dùng `arg` In []: df[&#39;Item_Outlet_Sales&#39;].apply(set_price, k=0.1) i vi DataFrame Ta dùng cú pháp DataFrame.apply(func, axis=0, raw=False, result_type=None, args=(), **kwargs) Trong ó: func: là hàm cn thc thi axis: thc thi theo dòng 0 hoc ct 1 raw: Xác nh xem dòng hoc ct có th chuyn v Series hoc ndarray result_type: Ch áp dng cho axis=1 args: Các i s ca hàm Ví d: In []: sample_df = sample_df = pd.DataFrame([[1, 2, &#39;A&#39;], [3, 6, &#39;B&#39;], [5, 10, &#39;C&#39;]], columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]) In []: sample_df Out[]: A B C 0 1 2 A 1 3 6 B 2 5 10 C Áp dng trên toàn DataFrame In []: sample_df.apply(lambda x: x * 2) Out[]: A B C 0 2 4 AA 1 6 12 BB 2 10 20 CC Lu ý: Khi áp dng cho toàn DataFrame hãy cn thn hàm func truyn vào, nu func không áp dng c cho toàn b các phn t s báo li. Ví d  trên vi x * 2 vn áp dng c cho ct C dng str, nhng khi thay bng x ** 2 s báo li vì toán t ** không áp dng cho str Áp dng trên mt s ct trong DataFrame ## Theo ct In []: sample_df[[&#39;A&#39;, &#39;B&#39;]].apply(np.sum, axis=1) Out[]: 0 13 1 13 2 13 dtype: int64 ## Theo dòng In []: df[[&#39;A&#39;, &#39;B&#39;]].apply(lambda x: np.sum(x), axis=0) Out[]: A 12 B 27 dtype: int64 Mt cách khác áp dng trên mt s ct trong DataFrame S dng lambda In []: sample_df.apply(lambda x: x[&#39;A&#39;] + 2 * x[&#39;B&#39;], axis=1) Out[]: 0 5 1 15 2 25 dtype: int64 Dùng hàm nh ngha def dsum(row): return row[&#39;A&#39;] + 2 * row[&#39;B&#39;] In []: sample_df.apply(dsum, axis=1) Out[]: 0 5 1 15 2 25 dtype: int64 Mo: Không nht thit giá tr tr v ca hàm là giá tr n, giá tr tr v có th di dng list, tuple hoc dict Dùng result_type  thay i cách tr v Ví d ta có 1 hàm tr v nhiu giá tr cùng lúc nh sau def dsum_2(row): return [row[&#39;A&#39;] + 2 * row[&#39;B&#39;], row[&#39;A&#39;] - 2 * row[&#39;B&#39;]] ## Khi không s dng `result_type` In []: sample_df.apply(dsum_2, axis=1) Out[]: 0 [5, -3] 1 [15, -9] 2 [25, -15] dtype: object Kt qu tr v ca phng pháp trên là Series vi các giá tr ca nó là dng list.  chuyn Series này thành DataFrame vi các ct cha các giá tr ca list theo th t, ta dùng result_type='expand' In []: sample_df.apply(dsum_2, axis=1, result_type=&#39;expand&#39;) 0 1 0 5 -3 1 15 -9 2 25 -15 Mo: Có th cu trúc tr v di dng DataFrame cho ví d trên mà không cn dùng result_type bng cách s dng pd.Series ca mt dictionary. Lúc này các ct ca DataFrame s c ánh nhãn theo key ca dictionary def dsum_3(row): return pd.Series({&#39;X&#39;: row[&#39;A&#39;] + 2 * row[&#39;B&#39;], &#39;Y&#39;:row[&#39;A&#39;] - 2 * row[&#39;B&#39;]}) In []: sample_df.apply(dsum_3, axis=1) Out[]: X Y 0 5 -3 1 15 -9 2 25 -15 5.3 S dng iterator df = pd.read_csv(&#39;data/big_mart_sales.csv&#39;, usecols=[&#39;Item_Identifier&#39;, &#39;Item_Fat_Content&#39;, &#39;Item_Type&#39;, &#39;Outlet_Size&#39;, &#39;Item_Outlet_Sales&#39;, &#39;Outlet_Establishment_Year&#39;]) 5.3.1 Iterrows DataFrame.iterrows() In []: row = next(df.iterrows()) Out[]: row (0, Item_Identifier FDA15 Item_Fat_Content Low Fat Item_Type Dairy Outlet_Establishment_Year 1999 Outlet_Size Medium Item_Outlet_Sales 3735.138 Name: 0, dtype: object) Kt qu tr v cho row là 1 tuple gm index và Series cha các giá tr ti index ó. Cách dùng vòng lp trong iterrows  duyt tng dòng ta dùng for nh bình thng prices = [] for i, row in df.iterrows(): prices.append(row[&#39;Item_Outlet_Sales&#39;] * 0.5) print(prices[:5]) [1867.569, 221.7114, 1048.635, 366.19, 497.3526] 5.3.2 Itertuple DataFrame.itertuples(index=True, name=&#39;Pandas&#39;) Trong ó: index: True tr v kt qu kèm theo index và False lc b index name: Quy nh kiu tr v Pandas: tr v namedtuple None: tr v tuple namedtuple: tr v namedtuple Tr v namedtuple In []: next(df.itertuples(index=True)) Out[]: Pandas(Index=0, Item_Identifier=&#39;FDA15&#39;, Item_Fat_Content=&#39;Low Fat&#39;, Item_Type=&#39;Dairy&#39;, Outlet_Establishment_Year=1999, Outlet_Size=&#39;Medium&#39;, Item_Outlet_Sales=3735.138) Tr v tuple In []: next(df.itertuples(index=False, name=None)) Out[]: (&#39;FDA15&#39;, &#39;Low Fat&#39;, &#39;Dairy&#39;, 1999, &#39;Medium&#39;, 3735.138) Cách dùng vòng lp trong itertuples name=default prices = [] for row in df.itertuples(): prices.append(row.Item_Outlet_Sales * 0.5) print(prices[:5]) name=None prices = [] for row in df.itertuples(index=False, name=None): prices.append(row[5] * 0.5) print(prices[:5]) 5.4 So sánh các phng pháp lp def vectorizer(df): prices = df[&#39;Item_Outlet_Sales&#39;] * 0.5 def applyer(df): prices = df[&#39;Item_Outlet_Sales&#39;].apply(lambda x: x * 0.5) def iterrows(df): prices = [] for i, row in df.iterrows(): prices.append(row[&#39;Item_Outlet_Sales&#39;] * 0.5) def itertuples1(df): prices = [] for row in df.itertuples(): prices.append(row.Item_Outlet_Sales * 0.5) def itertuples2(df): prices = [] for row in df.itertuples(index=False, name=None): prices.append(row[5] * 0.5) In []: %timeit -n 10 vectorizer(df) Out[]: 80.1 µs ± 42.8 µs per loop (mean ± std. dev. of 7 runs, 10 loops each) In[ ]: %timeit -n 10 applyer(df) Out[]: 1.37 ms ± 112 µs per loop (mean ± std. dev. of 7 runs, 10 loops each) In []: %timeit -n 10 iterrows(df) Out[]: 256 ms ± 2.48 ms per loop (mean ± std. dev. of 7 runs, 10 loops each) In []: %timeit -n 10 itertuples1(df) Out[]: 6.61 ms ± 200 µs per loop (mean ± std. dev. of 7 runs, 10 loops each) In []: %timeit -n 10 itertuples2(df) Out[]: 3.91 ms ± 132 µs per loop (mean ± std. dev. of 7 runs, 10 loops each) 5.5 X lý song song trong pandas X lý song song là phng pháp tn dng s lng core ca CPU  gii quyt vn  trong thi gian ngn hn. 5.5.1 pandarallel  cài t pandarallel bng pip pip install pandarallel Cách s dng from pandarallel import pandarallel pandarallel.initialize(progress_bar=True, n_workers=4)  thit lp cho pandarallel ta dùng .initialize. Trong ó: n_workers: là s lng cores ca CPU progress_bar: show tin trình  áp dng pandarallel ta ch vic thay th .apply bng .parallel_apply # df.apply(func) df.parallel_apply(func) "],["các-cách-phi-hp-nhiu-bng-vi-nhau.html", "Chng 6 Các cách phi hp nhiu bng vi nhau 6.1 Join 6.2 Merge 6.3 Concat", " Chng 6 Các cách phi hp nhiu bng vi nhau 6.1 Join 6.2 Merge 6.3 Concat "],["groupby.html", "Chng 7 Groupby 7.1 Groupby 7.2 Các hàm Filtering trong Groupby 7.3 Aggregate trong Groupby", " Chng 7 Groupby 7.1 Groupby Phng thc .groupby s gom các dòng hoc các ct thành các nhóm khác nhau. Cú pháp c bn ca .groupby nh sau DataFrame.groupby(by=None, axis=0, dropna=True) Trong ó by: có th là dng mapping, nhãn, danh sách nhãn hoc mt hàm tr v danh sách các index axis: Tùy chn group theo dòng {0 hoc index} hoc ct {1 hoc columns}, mc nh là dòng. dropna: Mc nh là True s b qua nhng dòng cha NA và False s thêm NA là mt khóa trong nhóm, tng t nh .value_counts() Ví d vi d liu Big Mart Salses In [1]: df.head() Out[1]: Item_Identifier Item_Type Outlet_Size Item_Outlet_Sales 0 FDA15 Dairy Medium 3735.1380 1 DRC01 Soft Drinks Medium 443.4228 2 FDN15 Meat Medium 2097.2700 3 FDX07 Fruits and Vegetables NaN 732.3800 4 NCD19 Household High 994.7052 In [2]: grouped = df.groupby(&#39;Item_Type&#39;) In [3]: type(grouped) Out[3]: pandas.core.groupby.generic.DataFrameGroupBy  xem tng nhóm trong group, ta có th s dng .get_groups() và truyn key vào ó. Ví d vi key Dairy In [4]: grouped.get_group(&#39;Dairy&#39;).head() Out[4]: Item_Identifier Item_Type Outlet_Size Item_Outlet_Sales 0 FDA15 Dairy Medium 3735.1380 11 FDA03 Dairy Small 2187.1530 19 FDU02 Dairy Small 2748.4224 28 FDE51 Dairy NaN 178.4344 30 FDV38 Dairy NaN 163.7868 Khi chn 1 column sau khi .groupby s tr v kiu pandas.core.groupby.generic.SeriesGroupBy 7.2 Các hàm Filtering trong Groupby .head(n=5) Tr v n dòng u ca mi group. In [4]: df.groupby([&#39;Item_Type&#39;]).head(n=2) Out[4]: Item_Identifier Item_Type Outlet_Size Item_Outlet_Sales 0 FDA15 Dairy Medium 3735.1380 1 DRC01 Soft Drinks Medium 443.4228 2 FDN15 Meat Medium 2097.2700 3 FDX07 Fruits and Vegetables NaN 732.3800 4 NCD19 Household High 994.7052 5 FDP36 Baking Goods Medium 556.6088 6 FDO10 Snack Foods High 343.5528 7 FDP10 Snack Foods Medium 4022.7636 8 FDH17 Frozen Foods NaN 1076.5986 9 FDU28 Frozen Foods NaN 4710.5350 10 FDY07 Fruits and Vegetables Medium 1516.0266 11 FDA03 Dairy Small 2187.1530 15 FDP49 Breakfast Small 1547.3192 16 NCB42 Health and Hygiene Medium 1621.8888 17 FDP49 Breakfast Medium 718.3982 18 DRI11 Hard Drinks Medium 2303.6680 21 FDW12 Baking Goods Medium 4064.0432 22 NCB30 Household Small 1587.2672 27 DRJ59 Hard Drinks High 308.9312 29 FDC14 Canned Small 125.8362 31 NCS17 Health and Hygiene Medium 2741.7644 33 FDO23 Breads NaN 2174.5028 34 DRH01 Soft Drinks Small 2085.2856 41 FDK43 Meat High 2150.5340 43 FDC02 Canned Medium 6768.5228 72 FDH35 Starchy Foods NaN 4604.6728 114 FDV11 Breads NaN 3151.8972 136 FDH35 Starchy Foods Medium 5262.4832 139 NCN07 Others NaN 263.6568 142 NCO55 Others NaN 2143.8760 231 FDG33 Seafood Medium 3435.5280 713 FDH21 Seafood Medium 1267.6832 .tail(n=5) Tr v n dòng cui ca mi group In [5]: df.groupby([&#39;Item_Type&#39;]).tail(n=2) Out[5]: Item_Identifier Item_Type Outlet_Size Item_Outlet_Sales 8317 FDN13 Breakfast NaN 1306.9654 8335 FDO49 Breakfast Medium 708.4112 8370 FDV23 Breads Small 871.5322 8413 FDW59 Breads Small 1691.1320 8423 FDJ57 Seafood Medium 2600.6148 8426 FDA22 Starchy Foods Small 4512.1266 8457 FDY50 Dairy Small 1516.6924 8463 FDG59 Starchy Foods Medium 810.9444 8473 DRI47 Hard Drinks NaN 431.4384 8483 DRI11 Hard Drinks NaN 1612.5676 8488 NCN14 Others Medium 2756.4120 8489 FDV13 Canned Medium 2109.2544 8491 FDO03 Meat Medium 4809.7392 8496 FDJ57 Seafood NaN 3715.1640 8499 NCK53 Health and Hygiene Small 2976.1260 8502 NCH43 Household NaN 3020.0688 8504 NCN18 Household Medium 4138.6128 8506 DRF37 Soft Drinks Medium 3944.8650 8508 FDW31 Fruits and Vegetables NaN 2587.9646 8509 FDG45 Fruits and Vegetables NaN 424.7804 8511 FDF05 Frozen Foods Medium 4207.8560 8512 FDR26 Dairy High 2479.4392 8513 FDH31 Meat Small 595.2252 8514 FDA01 Canned NaN 468.7232 8515 FDH24 Baking Goods Medium 1571.2880 8516 NCJ19 Others Medium 858.8820 8517 FDF53 Frozen Foods Small 3608.6360 8518 FDF22 Snack Foods High 2778.3834 8519 FDS36 Baking Goods NaN 549.2850 8520 NCJ29 Health and Hygiene Small 1193.1136 8521 FDN46 Snack Foods Medium 1845.5976 8522 DRG01 Soft Drinks Small 765.6700 Lu ý: .head() và .tail() tr v các dòng theo th t index ca chúng, không tr v theo th t sp xp theo key 7.3 Aggregate trong Groupby .count() m s lng phn t cho tng ct trong tng nhóm, không m các phn t NA In [6]: df.groupby([&#39;Item_Type&#39;]).count() Out[6]: Item_Identifier Outlet_Size Item_Outlet_Sales Item_Type Baking Goods 648 463 648 Breads 251 179 251 Breakfast 110 79 110 Canned 649 471 649 Dairy 682 496 682 Frozen Foods 856 615 856 Fruits and Vegetables 1232 883 1232 Hard Drinks 214 148 214 Health and Hygiene 520 367 520 Household 910 649 910 Meat 425 309 425 Others 169 123 169 Seafood 64 46 64 Snack Foods 1200 868 1200 Soft Drinks 445 312 445 Starchy Foods 148 105 148 .size() m s lng dòng cho tng nhóm In [7]: df.groupby([&#39;Item_Type&#39;]).size() Out[7]: Item_Type Baking Goods 648 Breads 251 Breakfast 110 Canned 649 Dairy 682 Frozen Foods 856 Fruits and Vegetables 1232 Hard Drinks 214 Health and Hygiene 520 Household 910 Meat 425 Others 169 Seafood 64 Snack Foods 1200 Soft Drinks 445 Starchy Foods 148 dtype: int64 SeriesGroupBy.nlargest(n=5) Tr v n dòng ln nht ca tng nhóm Series In []: df.groupby([&#39;Item_Type&#39;])[&#39;Item_Outlet_Sales&#39;].nlargest(n=2) Out[]: Item_Type Baking Goods 2776 7931.6754 809 7759.8990 Breads 3757 8958.3390 7737 7158.6816 Breakfast 7343 8209.3140 7690 7943.6598 Canned 6541 10306.5840 6886 8217.3036 Dairy 4888 10256.6490 1009 10236.6750 Frozen Foods 7752 9678.0688 997 9275.9256 Fruits and Vegetables 5223 12117.5600 1450 11445.1020 Hard Drinks 3087 7843.1240 1043 7152.0236 Health and Hygiene 4289 9779.9362 4991 8508.9240 Household 7188 13086.9648 7191 10072.8882 Meat 8201 9390.4432 7930 9227.9880 Others 197 6008.8450 3529 5546.1140 Seafood 2528 6503.5344 5042 5992.2000 Snack Foods 4349 10993.6896 333 9267.9360 Soft Drinks 6606 9554.2300 5619 8868.4560 Starchy Foods 1254 8132.0812 661 7443.6440 Name: Item_Outlet_Sales, dtype: float64 SeriesGroupBy.nsmallest(n=5) Tr v n dòng nh nht ca tng nhóm Series In []: df.groupby([&#39;Item_Type&#39;])[&#39;Item_Outlet_Sales&#39;].nsmallest(n=2) Out[]: Item_Type Baking Goods 2055 37.2848 430 38.6164 Breads 7388 35.2874 417 83.8908 Breakfast 4350 39.9480 920 50.6008 Canned 5670 37.9506 4297 41.9454 Dairy 3940 40.6138 5427 44.6086 Frozen Foods 4265 36.6190 7612 36.6190 Fruits and Vegetables 8486 45.2744 540 56.5930 Hard Drinks 574 37.9506 8116 71.9064 Health and Hygiene 3053 34.6216 4280 37.9506 Household 6950 33.2900 7861 41.2796 Meat 5374 47.9376 2407 71.9064 Others 6139 39.9480 2394 55.2614 Seafood 6903 149.8050 4502 158.4604 Snack Foods 2571 33.9558 6871 42.6112 Soft Drinks 906 33.2900 1913 40.6138 Starchy Foods 828 58.5904 5445 97.2068 Name: Item_Outlet_Sales, dtype: float64 aggregate .aggregate(func=None, *args, engine=None, engine_kwargs=None) Trong ó: func: mt hàm hoc danh sách hàm hàm dng string dictionary cha nhãn và hàm cho tng nhãn *args: i s truyn vào hàm func engine: Engine tính toán có th là cython, numba Danh sách hàm In []: df.groupby(&#39;Item_Type&#39;).agg([&#39;min&#39;,&#39;max&#39;]) Out[]: Item_Identifier Item_Outlet_Sales min max min max Item_Type Baking Goods FDA11 FDZ60 37.2848 7931.6754 Breads FDN23 FDZ35 35.2874 8958.3390 Breakfast FDK25 FDR37 39.9480 8209.3140 Canned FDA01 FDZ49 37.9506 10306.5840 Dairy DRC27 FDZ50 40.6138 10256.6490 Frozen Foods FDA04 FDZ52 36.6190 9678.0688 Fruits and Vegetables FDA07 FDZ56 45.2744 12117.5600 Hard Drinks DRF23 DRQ35 37.9506 7843.1240 Health and Hygiene NCA05 NCZ53 34.6216 9779.9362 Household NCA06 NCZ54 33.2900 13086.9648 Meat FDA39 FDZ51 47.9376 9390.4432 Others NCI31 NCQ43 39.9480 6008.8450 Seafood FDF33 FDK45 149.8050 6503.5344 Snack Foods FDA09 FDZ58 33.9558 10993.6896 Soft Drinks DRA12 DRZ24 33.2900 9554.2300 Starchy Foods FDA22 FDZ34 58.5904 8132.0812 Lu ý: min, max không áp dng c cho các ct có NaN value. Lúc này pandas s báo Warning FutureWarning: ['Outlet_Size'] did not aggregate successfully. Dictionary cha nhãn và hàm In []: df.groupby(&#39;Item_Type&#39;).agg({&#39;Item_Identifier&#39;: np.max, &#39;Item_Outlet_Sales&#39;: [np.std, np.mean]}) Out[]: Item_Identifier Item_Outlet_Sales amax std mean Item_Type Baking Goods FDZ60 1546.788045 1952.971207 Breads FDZ35 1644.235914 2204.132226 Breakfast FDR37 1911.693586 2111.808651 Canned FDZ49 1645.235638 2225.194904 Dairy FDZ50 1884.404698 2232.542597 Frozen Foods FDZ52 1724.777720 2132.867744 Fruits and Vegetables FDZ56 1799.503459 2289.009592 Hard Drinks DRQ35 1606.191587 2139.221622 Health and Hygiene NCZ53 1553.633063 2010.000265 Household NCZ54 1692.245757 2258.784300 Meat FDZ51 1695.231081 2158.977911 Others NCQ43 1431.860471 1926.139702 Seafood FDK45 1842.988719 2326.065928 Snack Foods FDZ58 1705.121755 2277.321739 Soft Drinks DRZ24 1674.249752 2006.511735 Starchy Foods FDZ34 1773.945328 2374.332773 S dng hàm t nh ngha trong Aggregate Ta có 2 function sau def foo(item_outlet_sales, alpha=1): mean = np.mean(item_outlet_sales) return np.sum(item_outlet_sales[item_outlet_sales &lt; alpha * mean]) def bar(item_identifier): return len(set(item_identifier)) In []: df.groupby(&#39;Item_Type&#39;).agg({&#39;Item_Identifier&#39;: [np.max, bar], &#39;Item_Outlet_Sales&#39;: [np.mean, foo]}) Out[]: Item_Identifier Item_Outlet_Sales amax bar mean foo Item_Type Baking Goods FDZ60 119 1952.971207 348230.7108 Breads FDZ35 45 2204.132226 152370.9932 Breakfast FDR37 20 2111.808651 64478.7352 Canned FDZ49 120 2225.194904 414387.2620 Dairy FDZ50 125 2232.542597 440485.2904 Frozen Foods FDZ52 155 2132.867744 514843.8318 Fruits and Vegetables FDZ56 220 2289.009592 783023.4112 Hard Drinks DRQ35 40 2139.221622 126412.1170 Health and Hygiene NCZ53 95 2010.000265 272449.3548 Household NCZ54 170 2258.784300 538634.1974 Meat FDZ51 80 2158.977911 263468.3786 Others NCQ43 30 1926.139702 81071.1370 Seafood FDK45 10 2326.065928 31677.4324 Snack Foods FDZ58 220 2277.321739 762663.2472 Soft Drinks DRZ24 80 2006.511735 257134.6232 Starchy Foods FDZ34 30 2374.332773 94087.5270 bn có th truyn vào tham s alpha bng cách dùng lambda In []: df.groupby(&#39;Item_Type&#39;).agg({&#39;Item_Outlet_Sales&#39;: [np.mean, lambda x: foo(x, alpha=0.1)]}) Out[]: Item_Outlet_Sales mean &lt;lambda_0&gt; Item_Type Baking Goods 1952.971207 5035.4454 Breads 2204.132226 1557.3062 Breakfast 2111.808651 1440.7912 Canned 2225.194904 5354.3636 Dairy 2232.542597 5992.8658 Frozen Foods 2132.867744 7111.4098 Fruits and Vegetables 2289.009592 12268.0308 Hard Drinks 2139.221622 1625.2178 Health and Hygiene 2010.000265 3723.8194 Household 2258.784300 8425.0332 Meat 2158.977911 4526.1084 Others 1926.139702 1445.4518 Seafood 2326.065928 1404.1722 Snack Foods 2277.321739 9573.5382 Soft Drinks 2006.511735 3207.1586 Starchy Foods 2374.332773 1151.1682 Apply trên nhiu ct và s dng function t nh ngha Gi s mun ly top_2 item có s lng Outlet_Sales cao nht và cao nhì trong tng nhóm. Ta nh ngha function sau def get_top_ex1(g): top_1, top_2 = sorted(list(zip(g[&#39;Item_Identifier&#39;], g[&#39;Item_Outlet_Sales&#39;])), key=lambda x: -x[1])[:2] return pd.Series({&#39;top_1_Item_Identifier&#39;: top_1[0], &#39;top_1_Item_Outlet_Sales&#39;: top_1[1], &#39;top_2_Item_Identifier&#39;: top_2[0], &#39;top_2_Item_Outlet_Sales&#39;: top_2[1]}) Trong ó g là DataFrame ca tng nhóm chia theo key ca groupby In []: df.groupby(&#39;Item_Type&#39;).apply(get_top_ex1) Out[]: top_1_Item_Identifier top_1_Item_Outlet_Sales \\ Item_Type Baking Goods FDB37 7931.6754 Breads FDR35 8958.3390 Breakfast FDR37 8209.3140 Canned FDI50 10306.5840 Dairy FDF39 10256.6490 Frozen Foods FDC17 9678.0688 Fruits and Vegetables FDQ19 12117.5600 Hard Drinks DRK23 7843.1240 Health and Hygiene NCM05 9779.9362 Household NCE42 13086.9648 Meat FDO03 9390.4432 Others NCN55 6008.8450 Seafood FDI57 6503.5344 Snack Foods FDP33 10993.6896 Soft Drinks DRF36 9554.2300 Starchy Foods FDG47 8132.0812 top_2_Item_Identifier top_2_Item_Outlet_Sales Item_Type Baking Goods FDL24 7759.8990 Breads FDS11 7158.6816 Breakfast FDQ37 7943.6598 Canned FDX13 8217.3036 Dairy FDU14 10236.6750 Frozen Foods FDK28 9275.9256 Fruits and Vegetables FDZ20 11445.1020 Hard Drinks DRF23 7152.0236 Health and Hygiene NCQ53 8508.9240 Household NCH18 10072.8882 Meat FDP15 9227.9880 Others NCM43 5546.1140 Seafood FDI09 5992.2000 Snack Foods FDN58 9267.9360 Soft Drinks DRE48 8868.4560 Starchy Foods FDA34 7443.6440 "],["làm-vic-vi-1-s-kiu-d-liu.html", "Chng 8 Làm vic vi 1 s kiu d liu 8.1 X lý d liu dng text 8.2 X lý d liu dng timestamp 8.3 Category trong pandas 8.4 X lý Missing data", " Chng 8 Làm vic vi 1 s kiu d liu 8.1 X lý d liu dng text 8.2 X lý d liu dng timestamp 8.3 Category trong pandas 8.4 X lý Missing data "],["mt-s-kin-thc-nâng-cao.html", "Chng 9 Mt s kin thc nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window", " Chng 9 Mt s kin thc nâng cao 9.1 MultiIndex 9.2 Pivot và Merge 9.3 Resample 9.4 Window "],["anomaly-detection-project.html", "Chng 10 Anomaly Detection Project", " Chng 10 Anomaly Detection Project "],["visualize-vi-matplotlib.html", "Chng 11 Visualize vi Matplotlib", " Chng 11 Visualize vi Matplotlib "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
